
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "semTools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('semTools')
Loading required package: MASS
Loading required package: lavaan
Loading required package: boot
Loading required package: mnormt
Loading required package: quadprog
This is lavaan 0.5-10
lavaan is BETA software! Please report any bugs.
 
###############################################################################
This is semTools 0.2-13
All users of R (or SEM) are invited to submit functions or ideas for functions.
###############################################################################
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("auxiliary")
> ### * auxiliary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: auxiliary
> ### Title: Analyzing data with full-information maximum likelihood with
> ###   auxiliary variables
> ### Aliases: auxiliary cfa.auxiliary sem.auxiliary growth.auxiliary
> ###   lavaan.auxiliary
> 
> ### ** Examples
> 
> # Example of confirmatory factor analysis
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 			  
> dat <- data.frame(HolzingerSwineford1939, z=rnorm(nrow(HolzingerSwineford1939), 0, 1))
> 			  
> fit <- cfa(HS.model, data=dat) 
> fitaux <- auxiliary(HS.model, aux="z", data=dat, fun="cfa") # Use lavaan script
> fitaux <- cfa.auxiliary(fit, aux="z", data=dat) # Use lavaan output
> 
> # Example of multiple groups confirmatory factor analysis
> 
> fitgroup <- cfa(HS.model, data=dat, group="school")
> fitgroupaux <- cfa.auxiliary(fitgroup, aux="z", data=dat, group="school")
> 
> # Example of path analysis
> 
> mod <- ' x5 ~ x4
+ x4 ~ x3
+ x3 ~ x1 + x2'
> 
> fitpath <- sem(mod, data=dat, fixed.x=FALSE) # fixed.x must be FALSE
> fitpathaux <- sem.auxiliary(fitpath, aux="z", data=dat)
> 
> # Example of full structural equation modeling
> 
> dat2 <- data.frame(PoliticalDemocracy, z=rnorm(nrow(PoliticalDemocracy), 0, 1))
> model <- ' 
+      ind60 =~ x1 + x2 + x3
+      dem60 =~ y1 + a*y2 + b*y3 + c*y4
+      dem65 =~ y5 + a*y6 + b*y7 + c*y8
+ 
+     dem60 ~ ind60
+     dem65 ~ ind60 + dem60
+ 
+     y1 ~~ y5
+     y2 ~~ y4 + y6
+     y3 ~~ y7
+     y4 ~~ y8
+     y6 ~~ y8
+ '
> fitsem <- sem(model, data=dat2, meanstructure=TRUE)
> fitsemaux <- sem.auxiliary(fitsem, aux="z", data=dat2, meanstructure=TRUE)
> 
> # Example of covariate at the factor level
> 
> HS.model.cov <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+              speed   =~ x7 + x8 + x9 
+ 			  visual ~ sex
+ 			  textual ~ sex
+ 			  speed ~ sex'
> 	  
> fitcov <- cfa(HS.model.cov, data=dat, fixed.x=FALSE) 
> fitcovaux <- cfa.auxiliary(fitcov, aux="z", data=dat)
> 
> # Example of  Endogenous variable with single indicator 
> HS.model.cov2 <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               x7 ~ visual + textual'
>  	  
> fitcov2 <- sem(HS.model.cov2, data=dat, fixed.x=FALSE) 
> fitcov2aux <- sem.auxiliary(fitcov2, aux="z", data=dat)
> 
> # Multiple auxiliary variables
> HS.model2 <- ' visual  =~ x1 + x2 + x3
+               speed   =~ x7 + x8 + x9'
> fit <- cfa(HS.model2, data=HolzingerSwineford1939)
> fitaux <- cfa.auxiliary(HS.model2, data=HolzingerSwineford1939, aux=c("x4", "x5")) 
Error in solve.default(E) : 
  Lapack routine dgesv: system is exactly singular: U[8,8] = 0
Warning in estimateVCOV(lavaanModel, samplestats = lavaanSampleStats, options = lavaanOptions,  :
  lavaan WARNING: could not compute standard errors!

> 
> 
> 
> cleanEx()
> nameEx("clipboard")
> ### * clipboard
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clipboard_saveFile
> ### Title: Copy or save the result of 'lavaan' object into a clipboard or a
> ###   file
> ### Aliases: clipboard saveFile
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(lavaan)
> ##D HW.model <- ' visual  =~ x1 + c1*x2 + x3
> ##D               textual =~ x4 + c1*x5 + x6
> ##D                speed   =~ x7 + x8 + x9 '
> ##D 
> ##D fit <- cfa(HW.model, data=HolzingerSwineford1939, group="school", meanstructure=TRUE)
> ##D 
> ##D # Copy the summary of the lavaan object
> ##D clipboard(fit)
> ##D 
> ##D # Copy the modification indices and the model fit from the miPowerFit function
> ##D clipboard(fit, "mifit")
> ##D 
> ##D # Copy the parameter estimates
> ##D clipboard(fit, "coef")
> ##D 
> ##D # Copy the standard errors
> ##D clipboard(fit, "se")
> ##D 
> ##D # Copy the sample statistics
> ##D clipboard(fit, "samp")
> ##D 
> ##D # Copy the fit measures
> ##D clipboard(fit, "fit")
> ##D 
> ##D # Save the summary of the lavaan object
> ##D saveFile(fit, "out.txt")
> ##D 
> ##D # Save the modification indices and the model fit from the miPowerFit function
> ##D saveFile(fit, "out.txt", "mifit")
> ##D 
> ##D # Save the parameter estimates
> ##D saveFile(fit, "out.txt", "coef")
> ##D 
> ##D # Save the standard errors
> ##D saveFile(fit, "out.txt", "se")
> ##D 
> ##D # Save the sample statistics
> ##D saveFile(fit, "out.txt", "samp")
> ##D 
> ##D # Save the fit measures
> ##D saveFile(fit, "out.txt", "fit")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dat2way")
> ### * dat2way
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dat2way
> ### Title: Simulated Dataset to Demonstrate Two-way Latent Interaction
> ### Aliases: dat2way
> 
> ### ** Examples
> 
> head(dat2way)
             x1         x2          x3         x4          x5          x6
[1,] -1.8187626 -0.8562262 -1.68180435  1.1433047  0.73634431 -1.66626093
[2,] -0.5151810  0.8567330 -0.06406867 -1.4098765  1.65212477  0.50982044
[3,] -1.4966179  1.7452026 -0.18804763  1.0352673 -0.77030873 -1.84342363
[4,] -1.2196720 -1.5443674 -0.49324152 -0.9803422 -0.39348424 -0.20869145
[5,]  1.1821387 -1.3806932  0.11446183 -0.6386459  0.04413679  0.03828171
[6,] -0.9725346 -0.4393652 -1.01947176 -0.1275244 -0.19718816 -0.79168626
             x7         x8         x9
[1,] -0.4793663 -1.6561633 -0.4313809
[2,] -0.9954784  0.1258883  0.8478154
[3,]  2.0252067  1.3671299  2.8677786
[4,] -0.7616253  1.6029655  0.8155289
[5,] -1.4655456  0.5215523  0.6441019
[6,] -1.8503951  0.6594724 -1.2279043
> 
> 
> 
> cleanEx()
> nameEx("dat3way")
> ### * dat3way
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dat3way
> ### Title: Simulated Dataset to Demonstrate Three-way Latent Interaction
> ### Aliases: dat3way
> 
> ### ** Examples
> 
> head(dat3way)
             x1         x2         x3          x4          x5         x6
[1,] -1.5350991  0.5853918 -2.7037129 -0.02852141  0.11372774  0.6060233
[2,] -0.2666704  1.5121169 -0.3589631 -1.04593896  0.15343084  0.9117688
[3,] -1.3490760 -0.5772260 -0.3833028 -0.03173043 -1.74828341 -3.1067799
[4,] -0.2400794 -0.5623048  1.3005997  1.20582017 -0.08547333 -0.5011112
[5,] -0.7621797  0.3373819 -0.2898214 -1.12900967  2.27976826  1.4179838
[6,] -0.7475130 -0.6808552 -0.5687009  2.10449005  1.09482866  0.8162109
             x7         x8         x9        x10        x11        x12
[1,]  0.1552561 -0.4999699  0.7776045 -5.1407168 -4.6485279 -2.9206060
[2,]  0.2464521  1.1475477 -1.1810510 -0.5888113 -0.6838049  0.3721826
[3,] -1.0974235  1.1829523 -2.0712661 -0.1813980 -1.3643337  0.1941221
[4,]  2.7009420  1.8972051  1.2514742 -1.3278763 -2.6836083 -1.9448700
[5,]  1.3155577  1.9718828  0.8966157  0.2404679  1.8014037 -0.4086983
[6,]  0.4184400  0.5211154  1.6938082  0.4257118  1.8162746  0.5516283
> 
> 
> 
> cleanEx()
> nameEx("exLong")
> ### * exLong
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exLong
> ### Title: Simulated Data set to Demonstrate Longitudinal Measurement
> ###   Invariance
> ### Aliases: exLong
> 
> ### ** Examples
> 
> head(exLong)
     sex       y1t1       y2t1        y3t1       y1t2        y2t2      y3t2
1 female  2.7625423  2.2812510  2.49656014  2.9499400  1.12338865 2.1505466
2 female  0.2707267 -0.7830365 -0.23554656  0.4631038  0.37536412 2.0283960
3 female -0.2604141  0.3146881  1.21590069  0.3528803  0.00986991 1.0709696
4 female -1.0227953 -1.3454733  0.04899156  1.9530137 -1.03357363 2.7817132
5 female  0.7385408 -0.6027341  0.42557808 -0.2027779 -0.34937717 1.1865013
6 female  0.5864878 -0.4659974  0.10691644  0.7869085 -0.31982170 0.4825864
       y1t3       y2t3       y3t3
1  1.912824  1.9625734  2.4403812
2  2.112440  0.4326280  2.6352259
3  1.472736  1.1951005  1.4287358
4  1.249376 -0.5369589  2.3371304
5  1.425101  1.8539630  2.0861627
6 -1.201912 -2.0090700 -0.8366951
> 
> 
> 
> cleanEx()
> nameEx("findRMSEApower")
> ### * findRMSEApower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRMSEApower
> ### Title: Find the statistical power based on population RMSEA
> ### Aliases: findRMSEApower
> 
> ### ** Examples
> 
> findRMSEApower(rmsea0=.05, rmseaA=.08, df=20, n=200)
[1] 0.454368
> 
> 
> 
> cleanEx()
> nameEx("findRMSEApowernested")
> ### * findRMSEApowernested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRMSEApowernested
> ### Title: Find power given a sample size in nested model comparison
> ### Aliases: findRMSEApowernested
> 
> ### ** Examples
> 
> findRMSEApowernested(rmsea0A = 0.06, rmsea0B = 0.05, rmsea1A = 0.08, 
+ rmsea1B = 0.05, dfA = 22, dfB = 20, n = 200, alpha = 0.05, group = 1)
[1] 0.5624986
> 
> 
> 
> cleanEx()
> nameEx("findRMSEAsamplesize")
> ### * findRMSEAsamplesize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRMSEAsamplesize
> ### Title: Find the minimum sample size for a given statistical power based
> ###   on population RMSEA
> ### Aliases: findRMSEAsamplesize
> 
> ### ** Examples
> 
> findRMSEAsamplesize(rmsea0=.05, rmseaA=.08, df=20, power=0.80)
[1] 434
> 
> 
> 
> cleanEx()
> nameEx("findRMSEAsamplesizenested")
> ### * findRMSEAsamplesizenested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findRMSEAsamplesizenested
> ### Title: Find sample size given a power in nested model comparison
> ### Aliases: findRMSEAsamplesizenested
> 
> ### ** Examples
> 
> findRMSEAsamplesizenested(rmsea0A = 0, rmsea0B = 0, rmsea1A = 0.06, 
+ rmsea1B = 0.05, dfA = 22, dfB = 20, power=0.80, alpha=.05, group=1) 
[1] 331
> 
> 
> 
> cleanEx()
> nameEx("fitMeasuresMx")
> ### * fitMeasuresMx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitMeasuresMx
> ### Title: Find fit measures from an MxModel result
> ### Aliases: fitMeasuresMx
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(OpenMx)
> ##D data(demoOneFactor)
> ##D manifests <- names(demoOneFactor)
> ##D latents <- c("G")
> ##D factorModel <- mxModel("One Factor", 
> ##D     type="RAM",
> ##D     manifestVars=manifests, 
> ##D     latentVars=latents,
> ##D     mxPath(from=latents, to=manifests),
> ##D     mxPath(from=manifests, arrows=2),
> ##D     mxPath(from=latents, arrows=2, free=FALSE, values=1.0),
> ##D     mxData(observed=cov(demoOneFactor), type="cov", numObs=500)
> ##D )
> ##D factorFit <- mxRun(factorModel)
> ##D round(fitMeasuresMx(factorFit), 3)
> ##D 
> ##D # Compare with lavaan
> ##D library(lavaan)
> ##D script <- "f1 =~ x1 + x2 + x3 + x4 + x5"
> ##D fitMeasures(cfa(script, sample.cov = cov(demoOneFactor), sample.nobs = 500, std.lv = TRUE))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("impliedFactorStat")
> ### * impliedFactorStat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: impliedFactorStat
> ### Title: Calculate the model-implied factor means and covariance matrix.
> ### Aliases: impliedFactorMean impliedFactorCov impliedFactorStat
> 
> ### ** Examples
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939, group="school")
> impliedFactorStat(fit)
$mean
$mean$Pasteur
        intrcp
visual       0
textual      0
speed        0

$mean$`Grant-White`
        intrcp
visual       0
textual      0
speed        0


$cov
$cov$Pasteur
        visual textul speed
visual  1.097              
textual 0.479  0.894       
speed   0.185  0.182  0.350

$cov$`Grant-White`
        visual textul speed
visual  0.604              
textual 0.408  0.942       
speed   0.276  0.222  0.461


> 
> 
> 
> cleanEx()
> nameEx("indProd")
> ### * indProd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: indProd
> ### Title: Make products of indicators using no centering, mean centering,
> ###   double-mean centering, or residual centering
> ### Aliases: indProd orthogonalize
> 
> ### ** Examples
> 
> # Mean centering / two-way interaction / match-paired
> dat <- indProd(attitude[,-1], var1=1:3, var2=4:6)
> 
> # Residual centering / two-way interaction / match-paired
> dat2 <- indProd(attitude[,-1], var1=1:3, var2=4:6, match=FALSE, meanC=FALSE, residualC=TRUE, doubleMC=FALSE)
> 
> # Double-mean centering / two-way interaction / match-paired
> dat3 <- indProd(attitude[,-1], var1=1:3, var2=4:6, match=FALSE, meanC=TRUE, residualC=FALSE, doubleMC=TRUE)
> 
> # Mean centering / three-way interaction / match-paired
> dat4 <- indProd(attitude[,-1], var1=1:2, var2=3:4, var3=5:6)
> 
> # Residual centering / three-way interaction / match-paired
> dat5 <- indProd(attitude[,-1], var1=1:2, var2=3:4, var3=5:6, match=FALSE, meanC=FALSE, residualC=TRUE, doubleMC=FALSE)
> 
> # Double-mean centering / three-way interaction / match-paired
> dat6 <- indProd(attitude[,-1], var1=1:2, var2=3:4, var3=5:6, match=FALSE, meanC=TRUE, residualC=TRUE, doubleMC=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("kurtosis")
> ### * kurtosis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kurtosis
> ### Title: Finding excessive kurtosis
> ### Aliases: kurtosis
> 
> ### ** Examples
> 
> kurtosis(1:5)
Excess Kur (g2)              se               z               p 
     -1.2000000       2.1908902      -0.5477226       0.5838824 
> 
> 
> 
> cleanEx()
> nameEx("lavaanStar-class")
> ### * lavaanStar-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lavaanStar-class
> ### Title: Class For Representing A (Fitted) Latent Variable Model with
> ###   Additional Elements
> ### Aliases: lavaanStar-class inspect,lavaanStar-method
> ###   summary,lavaanStar-method
> 
> ### ** Examples
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 			  
> dat <- data.frame(HolzingerSwineford1939, z=rnorm(nrow(HolzingerSwineford1939), 0, 1))
> 			  
> fit <- cfa(HS.model, data=dat) 
> fitaux <- auxiliary(fit, aux="z", data=dat, fun="cfa")
> 
> 
> 
> cleanEx()
> nameEx("lisrel2lavaan")
> ### * lisrel2lavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lisrel2lavaan
> ### Title: Latent variable modeling in 'lavaan' using LISREL syntax
> ### Aliases: lisrel2lavaan
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## calling lisrel2lavaan without specifying the filename argument will open
> ##D ## a file browser window with which a LISREL syntax file can be selected. 
> ##D 
> ##D ## any additional arguments to be passed to lavaan for data analysis can be
> ##D ## specified normally. 
> ##D 
> ##D lisrel2lavaan(se="standard")
> ##D ## lavaan output summary printed to screen
> ##D ## lavaan fit object returned silently
> ##D 
> ##D ## manual file specification 
> ##D 
> ##D lisrel2lavaan(filename="myFile.LS8", se="standard")
> ##D ## lavaan output summary printed to screen
> ##D ## lavaan fit object returned silently
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loadingFromAlpha")
> ### * loadingFromAlpha
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadingFromAlpha
> ### Title: Find standardized factor loading from coefficient alpha
> ### Aliases: loadingFromAlpha
> 
> ### ** Examples
> 
>     loadingFromAlpha(0.8, 4)
[1] 0.7071068
> 
> 
> 
> cleanEx()
> nameEx("longInvariance")
> ### * longInvariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: longInvariance
> ### Title: Measurement Invariance Tests Within Person
> ### Aliases: longInvariance longInvariance
> 
> ### ** Examples
> 
> model <- ' f1t1 =~ y1t1 + y2t1 + y3t1
+               f1t2 =~ y1t2 + y2t2 + y3t2
+ 			  f1t3 =~ y1t3 + y2t3 + y3t3'
> 
> # Create list of variables
> var1 <- c("y1t1", "y2t1", "y3t1")
> var2 <- c("y1t2", "y2t2", "y3t2")
> var3 <- c("y1t3", "y2t3", "y3t3")
> constrainedVar <- list(var1, var2, var3)
> 
> # Invariance of the same factor across timepoints
> longInvariance(model, auto=1, constrainAuto=TRUE, varList=constrainedVar, data=exLong)

#################### Measurement invariance tests ####################

The order of autocorrelation:  1 

#################### Model 1: configural invariance:
   chisq       df   pvalue      cfi    rmsea      bic 
  21.806   21.000    0.411    0.999    0.014 4542.613 

#################### Model 2: weak invariance (equal loadings):
   chisq       df   pvalue      cfi    rmsea      bic 
  27.038   25.000    0.354    0.998    0.020 4526.652 

[Model 1 versus model 2]
  delta.chisq      delta.df delta.p.value     delta.cfi 
        5.232         4.000         0.264         0.001 

#################### Model 3: strong invariance (equal loadings + intercepts):
   chisq       df   pvalue      cfi    rmsea      bic 
  44.500   29.000    0.033    0.986    0.052 4522.921 

[Model 1 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       22.695         8.000         0.004         0.013 

[Model 2 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       17.462         4.000         0.002         0.012 

#################### Model 4: equal loadings + intercepts + means:
   chisq       df   pvalue      cfi    rmsea      bic 
 150.143   31.000    0.000    0.891    0.139 4617.967 

[Model 1 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
      128.337        10.000         0.000         0.109 

[Model 2 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
      123.105         6.000         0.000         0.107 

[Model 3 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
      105.643         2.000         0.000         0.095 
> 
> # Invariance of the same factor across timepoints and groups
> longInvariance(model, auto=1, constrainAuto=TRUE, varList=constrainedVar, data=exLong, group="sex", group.equal=c("loadings", "intercepts"))

#################### Measurement invariance tests ####################

The order of autocorrelation:  1 

#################### Model 1: configural invariance:
   chisq       df   pvalue      cfi    rmsea      bic 
  43.993   54.000    0.833    1.000    0.000 4631.688 

#################### Model 2: weak invariance (equal loadings):
   chisq       df   pvalue      cfi    rmsea      bic 
  49.247   58.000    0.787    1.000    0.000 4615.748 

[Model 1 versus model 2]
  delta.chisq      delta.df delta.p.value     delta.cfi 
        5.254         4.000         0.262         0.000 

#################### Model 3: strong invariance (equal loadings + intercepts):
   chisq       df   pvalue      cfi    rmsea      bic 
  66.896   62.000    0.313    0.995    0.028 4612.204 

[Model 1 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       22.903         8.000         0.003         0.005 

[Model 2 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       17.649         4.000         0.001         0.005 

#################### Model 4: equal loadings + intercepts + means:
   chisq       df   pvalue      cfi    rmsea      bic 
 142.192   66.000    0.000    0.930    0.107 4666.306 

[Model 1 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       98.198        12.000         0.000         0.070 

[Model 2 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       92.944         8.000         0.000         0.070 

[Model 3 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       75.296         4.000         0.000         0.066 
> 
> 
> 
> cleanEx()
> nameEx("mardiaKurtosis")
> ### * mardiaKurtosis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mardiaKurtosis
> ### Title: Finding Mardia's multivariate kurtosis
> ### Aliases: mardiaKurtosis
> 
> ### ** Examples
> 
> library(lavaan)
> mardiaKurtosis(HolzingerSwineford1939[,paste("x", 1:9, sep="")])
         b2d            z            p 
102.90374304   2.40658874   0.01610229 
> 
> 
> 
> cleanEx()
> nameEx("mardiaSkew")
> ### * mardiaSkew
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mardiaSkew
> ### Title: Finding Mardia's multivariate skewness
> ### Aliases: mardiaSkew
> 
> ### ** Examples
> 
> library(lavaan)
> mardiaSkew(HolzingerSwineford1939[,paste("x", 1:9, sep="")])
       b1d        chi         df          p 
  6.806892 341.479091 165.000000   1.000000 
> 
> 
> 
> cleanEx()
> nameEx("measurementInvariance")
> ### * measurementInvariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: measurementInvariance
> ### Title: Measurement Invariance Tests
> ### Aliases: measurementInvariance measurementinvariance
> 
> ### ** Examples
> 
> HW.model <- ' visual =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed =~ x7 + x8 + x9 '
> 
> measurementInvariance(HW.model, data=HolzingerSwineford1939, group="school")

Measurement invariance tests:

Model 1: configural invariance:
   chisq       df   pvalue      cfi    rmsea      bic 
 115.851   48.000    0.000    0.923    0.097 7706.822 

Model 2: weak invariance (equal loadings):
   chisq       df   pvalue      cfi    rmsea      bic 
 124.044   54.000    0.000    0.921    0.093 7680.771 

[Model 1 versus model 2]
  delta.chisq      delta.df delta.p.value     delta.cfi 
        8.192         6.000         0.224         0.002 

Model 3: strong invariance (equal loadings + intercepts):
   chisq       df   pvalue      cfi    rmsea      bic 
 164.103   60.000    0.000    0.882    0.107 7686.588 

[Model 1 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       48.251        12.000         0.000         0.041 

[Model 2 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       40.059         6.000         0.000         0.038 

Model 4: equal loadings + intercepts + means:
   chisq       df   pvalue      cfi    rmsea      bic 
 204.605   63.000    0.000    0.840    0.122 7709.969 

[Model 1 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       88.754        15.000         0.000         0.083 

[Model 3 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       40.502         3.000         0.000         0.042 
> 
> 
> 
> cleanEx()
> nameEx("miPowerFit")
> ### * miPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPowerFit
> ### Title: Modification indices and their power approach for model fit
> ###   evaluation
> ### Aliases: miPowerFit miPowerFit
> 
> ### ** Examples
> 
> library(lavaan)
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939, group="sex", meanstructure=TRUE)
> miPowerFit(fit)
        lhs op rhs group            mi         epc target.epc     std.epc
4    visual =~  x4     1  0.6363651929  0.08975851    0.55002  0.06527707
5    visual =~  x5     1  8.1846902298 -0.35989771    0.62097 -0.23182881
6    visual =~  x6     1  5.0193118358  0.24236589    0.52248  0.18555154
7    visual =~  x7     1 10.5807135365 -0.40027951    0.49734 -0.32193380
8    visual =~  x8     1  0.0310316127  0.02904995    0.54861  0.02118058
9    visual =~  x9     1 16.8815217816  0.46121535    0.44370  0.41579338
10  textual =~  x1     1  4.9557453408  0.42348422    0.48047  0.35256012
11  textual =~  x2     1  0.0000402809  0.00089994    0.54147  0.00066481
12  textual =~  x3     1  4.9948038007 -0.37207769    0.50582 -0.29423992
16  textual =~  x7     1  3.1602169688 -0.15037285    0.43316 -0.13885966
17  textual =~  x8     1  0.3928700712  0.06951374    0.47782  0.05819244
18  textual =~  x9     1  2.2026779714  0.11822085    0.38644  0.12236898
19    speed =~  x1     1  0.3217033205  0.11950081    0.68938  0.06933831
20    speed =~  x2     1  0.2311807692 -0.09208720    0.77691 -0.04741216
21    speed =~  x3     1  0.0944508518 -0.05851503    0.72575 -0.03225090
22    speed =~  x4     1  0.2595590819 -0.05545314    0.68733 -0.03227164
23    speed =~  x5     1  0.0097119875 -0.01194366    0.77600 -0.00615653
24    speed =~  x6     1  0.4028919820  0.06665168    0.65292  0.04083326
29       x1 ~~  x2     1  6.1072176996 -0.34410133    0.13987 -0.24601871
30       x1 ~~  x3     1  0.0654834197 -0.07637322    0.13066 -0.05845301
31       x1 ~~  x4     1  0.1096188436  0.01949500    0.12374  0.01575468
32       x1 ~~  x5     1  0.5271293102 -0.04746402    0.13970 -0.03397458
33       x1 ~~  x6     1  2.1293565996  0.08299778    0.11755  0.07060911
34       x1 ~~  x7     1  6.6472078927 -0.17487814    0.11189 -0.15629316
35       x1 ~~  x8     1  2.5198193898  0.12360758    0.12343  0.10014719
36       x1 ~~  x9     1  1.7976059677  0.08685096    0.09982  0.08700609
38       x2 ~~  x3     1  7.7668481475  0.35304448    0.14725  0.23976358
39       x2 ~~  x4     1  1.6215073446 -0.09214559    0.13945 -0.06607677
40       x2 ~~  x5     1  0.0040735490 -0.00509066    0.15744 -0.00323334
41       x2 ~~  x6     1  2.0081568085  0.09948557    0.13247  0.07510043
42       x2 ~~  x7     1  2.6587735625 -0.13572522    0.12610 -0.10763488
43       x2 ~~  x8     1  0.0065903179  0.00711848    0.13910  0.00511763
44       x2 ~~  x9     1  1.9090281742  0.11173841    0.11250  0.09932660
46       x3 ~~  x4     1  2.1941046092  0.09335041    0.13027  0.07165961
47       x3 ~~  x5     1  7.4224940550 -0.19011195    0.14707 -0.12926203
48       x3 ~~  x6     1  0.0283154777  0.01026169    0.12375  0.00829249
49       x3 ~~  x7     1  0.5742373477  0.05468966    0.11779  0.04642818
50       x3 ~~  x8     1  4.2234622323 -0.16281335    0.12994 -0.12530133
51       x3 ~~  x9     1  6.3906616527  0.17603979    0.10509  0.16751662
53       x4 ~~  x5     1  4.9210526246  0.40931674    0.13929  0.29386073
54       x4 ~~  x6     1  7.6056442352 -0.38131874    0.11720 -0.32536808
55       x4 ~~  x7     1  0.9916474583  0.04930642    0.11156  0.04419778
56       x4 ~~  x8     1  2.1610996059 -0.07683682    0.12306 -0.06243895
57       x4 ~~  x9     1  0.1232680989  0.01689664    0.09953  0.01697727
59       x5 ~~  x6     1  0.5068299017  0.11823268    0.13232  0.08935681
60       x5 ~~  x7     1  0.2983302555 -0.02979480    0.12595 -0.02365597
61       x5 ~~  x8     1  0.9566993134  0.05651261    0.13893  0.04067568
62       x5 ~~  x9     1  0.0797928421 -0.01497183    0.11236 -0.01332434
64       x6 ~~  x7     1  1.0862703029 -0.05008005    0.10597 -0.04725739
65       x6 ~~  x8     1  0.7472114388  0.04376563    0.11690  0.03743928
66       x6 ~~  x9     1  0.0000001939 -0.00002057    0.09454 -0.00002176
68       x7 ~~  x8     1 15.8009630225  1.48246020    0.11127  1.33225526
69       x7 ~~  x9     1  0.0714106474  0.03086671    0.08999  0.03429858
71       x8 ~~  x9     1 10.6072850037 -0.61451140    0.09927 -0.61902038
94   visual =~  x4     2  2.2437764115  0.12994174    0.48278  0.10766089
95   visual =~  x5     2  1.1745723858 -0.10524270    0.53243 -0.07906658
96   visual =~  x6     2  0.2222244499 -0.03909897    0.45681 -0.03423650
97   visual =~  x7     2  2.5184353916 -0.23620561    0.46431 -0.20348837
98   visual =~  x8     2  4.7177237434 -0.29543316    0.36754 -0.32152600
99   visual =~  x9     2 13.0676376868  0.79336171    0.44525  0.71272638
100 textual =~  x1     2  2.1238863096  0.22593106    0.46306  0.19516315
101 textual =~  x2     2  0.0003231965  0.00190155    0.41416  0.00183654
102 textual =~  x3     2  2.8301878638 -0.17472027    0.40273 -0.17353510
106 textual =~  x7     2  1.6152278712  0.12395986    0.44101  0.11243344
107 textual =~  x8     2  1.9397236126 -0.10719061    0.34909 -0.12282269
108 textual =~  x9     2  0.1806473812  0.04738402    0.42291  0.04481760
109   speed =~  x1     2  0.1318580727 -0.14575352    0.89522 -0.06512522
110   speed =~  x2     2  1.7437830085 -0.34387157    0.80068 -0.17178935
111   speed =~  x3     2  2.6959618701  0.42399996    0.77859  0.21783020
112   speed =~  x4     2  0.0196634527 -0.01966363    0.88650 -0.00887250
113   speed =~  x5     2  0.0667162827  0.04069207    0.97766  0.01664884
114   speed =~  x6     2  0.0121729568 -0.01483215    0.83881 -0.00707296
119      x1 ~~  x2     2  0.0155783388  0.01556890    0.12982  0.01199256
120      x1 ~~  x3     2  1.1184468487 -0.14245058    0.12624 -0.11284193
121      x1 ~~  x4     2  5.3210698010  0.12729607    0.14374  0.08856285
122      x1 ~~  x5     2  0.3174510962 -0.03515025    0.15852 -0.02217464
123      x1 ~~  x6     2  1.3353215728 -0.06142984    0.13600 -0.04516798
124      x1 ~~  x7     2  0.5888919598 -0.06240714    0.13824 -0.04514513
125      x1 ~~  x8     2  3.6643065833 -0.12072409    0.10942 -0.11032604
126      x1 ~~  x9     2  2.8653460190  0.13798132    0.13256  0.10408764
128      x2 ~~  x3     2  0.9935396006  0.08013062    0.11291  0.07096997
129      x2 ~~  x4     2  0.5817656443  0.04227567    0.12856  0.03288493
130      x2 ~~  x5     2  0.0566768756 -0.01500972    0.14178 -0.01058694
131      x2 ~~  x6     2  0.2338060099 -0.02594120    0.12164 -0.02132608
132      x2 ~~  x7     2  5.2742796669 -0.18724566    0.12364 -0.15144616
133      x2 ~~  x8     2  0.0818786898 -0.01708367    0.09787 -0.01745562
134      x2 ~~  x9     2  0.0567591048  0.01655187    0.11856  0.01396033
136      x3 ~~  x4     2  1.9413002231 -0.07368868    0.12501 -0.05894670
137      x3 ~~  x5     2  1.6425036450 -0.07706690    0.13786 -0.05590083
138      x3 ~~  x6     2  2.3220076430  0.07797957    0.11828  0.06592563
139      x3 ~~  x7     2  0.1142725457 -0.02628818    0.12023 -0.02186549
140      x3 ~~  x8     2  1.7933069418  0.07645565    0.09517  0.08033704
141      x3 ~~  x9     2  0.4642190294  0.04570650    0.11529  0.03964414
143      x4 ~~  x5     2  0.1838425898 -0.06028887    0.15697 -0.03840766
144      x4 ~~  x6     2  0.7799571841 -0.10845376    0.13468 -0.08052826
145      x4 ~~  x7     2  4.1065940661  0.12116737    0.13689  0.08851458
146      x4 ~~  x8     2  0.3030845985 -0.02395238    0.10836 -0.02210473
147      x4 ~~  x9     2  2.5341691841 -0.07906274    0.13127 -0.06022866
149      x5 ~~  x6     2  1.5981826315  0.16016297    0.14853  0.10783444
150      x5 ~~  x7     2  1.2466141512 -0.07602868    0.15097 -0.05036145
151      x5 ~~  x8     2  0.0198339000 -0.00697324    0.11950 -0.00583530
152      x5 ~~  x9     2  2.4284440849  0.08779718    0.14477  0.06064619
154      x6 ~~  x7     2  0.1524468058  0.02261785    0.12953  0.01746204
155      x6 ~~  x8     2  0.0134536636  0.00488648    0.10253  0.00476592
156      x6 ~~  x9     2  0.0183321346 -0.00649482    0.12421 -0.00522893
158      x7 ~~  x8     2 11.8167173108  0.26834571    0.10421  0.25749648
159      x7 ~~  x9     2  5.2529481588 -0.27165755    0.12625 -0.21517568
161      x8 ~~  x9     2  1.4510469569 -0.17961374    0.09994 -0.17972911
    std.target.epc significant.mi high.power decision
4              0.4          FALSE       TRUE       NM
5              0.4           TRUE       TRUE   EPC:NM
6              0.4           TRUE       TRUE   EPC:NM
7              0.4           TRUE       TRUE   EPC:NM
8              0.4          FALSE       TRUE       NM
9              0.4           TRUE       TRUE    EPC:M
10             0.4           TRUE      FALSE        M
11             0.4          FALSE       TRUE       NM
12             0.4           TRUE       TRUE   EPC:NM
16             0.4          FALSE       TRUE       NM
17             0.4          FALSE       TRUE       NM
18             0.4          FALSE       TRUE       NM
19             0.4          FALSE       TRUE       NM
20             0.4          FALSE       TRUE       NM
21             0.4          FALSE       TRUE       NM
22             0.4          FALSE       TRUE       NM
23             0.4          FALSE       TRUE       NM
24             0.4          FALSE       TRUE       NM
29             0.1           TRUE      FALSE        M
30             0.1          FALSE      FALSE        I
31             0.1          FALSE      FALSE        I
32             0.1          FALSE      FALSE        I
33             0.1          FALSE      FALSE        I
34             0.1           TRUE      FALSE        M
35             0.1          FALSE      FALSE        I
36             0.1          FALSE      FALSE        I
38             0.1           TRUE      FALSE        M
39             0.1          FALSE      FALSE        I
40             0.1          FALSE      FALSE        I
41             0.1          FALSE      FALSE        I
42             0.1          FALSE      FALSE        I
43             0.1          FALSE      FALSE        I
44             0.1          FALSE      FALSE        I
46             0.1          FALSE      FALSE        I
47             0.1           TRUE      FALSE        M
48             0.1          FALSE      FALSE        I
49             0.1          FALSE      FALSE        I
50             0.1           TRUE      FALSE        M
51             0.1           TRUE      FALSE        M
53             0.1           TRUE      FALSE        M
54             0.1           TRUE      FALSE        M
55             0.1          FALSE      FALSE        I
56             0.1          FALSE      FALSE        I
57             0.1          FALSE      FALSE        I
59             0.1          FALSE      FALSE        I
60             0.1          FALSE      FALSE        I
61             0.1          FALSE      FALSE        I
62             0.1          FALSE      FALSE        I
64             0.1          FALSE      FALSE        I
65             0.1          FALSE      FALSE        I
66             0.1          FALSE      FALSE        I
68             0.1           TRUE      FALSE        M
69             0.1          FALSE      FALSE        I
71             0.1           TRUE      FALSE        M
94             0.4          FALSE       TRUE       NM
95             0.4          FALSE       TRUE       NM
96             0.4          FALSE       TRUE       NM
97             0.4          FALSE       TRUE       NM
98             0.4           TRUE      FALSE        M
99             0.4           TRUE      FALSE        M
100            0.4          FALSE       TRUE       NM
101            0.4          FALSE       TRUE       NM
102            0.4          FALSE       TRUE       NM
106            0.4          FALSE       TRUE       NM
107            0.4          FALSE       TRUE       NM
108            0.4          FALSE       TRUE       NM
109            0.4          FALSE      FALSE        I
110            0.4          FALSE       TRUE       NM
111            0.4          FALSE       TRUE       NM
112            0.4          FALSE       TRUE       NM
113            0.4          FALSE       TRUE       NM
114            0.4          FALSE       TRUE       NM
119            0.1          FALSE      FALSE        I
120            0.1          FALSE      FALSE        I
121            0.1           TRUE      FALSE        M
122            0.1          FALSE      FALSE        I
123            0.1          FALSE      FALSE        I
124            0.1          FALSE      FALSE        I
125            0.1          FALSE      FALSE        I
126            0.1          FALSE      FALSE        I
128            0.1          FALSE      FALSE        I
129            0.1          FALSE      FALSE        I
130            0.1          FALSE      FALSE        I
131            0.1          FALSE      FALSE        I
132            0.1           TRUE      FALSE        M
133            0.1          FALSE      FALSE        I
134            0.1          FALSE      FALSE        I
136            0.1          FALSE      FALSE        I
137            0.1          FALSE      FALSE        I
138            0.1          FALSE      FALSE        I
139            0.1          FALSE      FALSE        I
140            0.1          FALSE      FALSE        I
141            0.1          FALSE      FALSE        I
143            0.1          FALSE      FALSE        I
144            0.1          FALSE      FALSE        I
145            0.1           TRUE      FALSE        M
146            0.1          FALSE      FALSE        I
147            0.1          FALSE      FALSE        I
149            0.1          FALSE      FALSE        I
150            0.1          FALSE      FALSE        I
151            0.1          FALSE      FALSE        I
152            0.1          FALSE      FALSE        I
154            0.1          FALSE      FALSE        I
155            0.1          FALSE      FALSE        I
156            0.1          FALSE      FALSE        I
158            0.1           TRUE      FALSE        M
159            0.1           TRUE      FALSE        M
161            0.1          FALSE      FALSE        I
> 
> model <- ' 
+   # latent variable definitions
+      ind60 =~ x1 + x2 + x3
+      dem60 =~ y1 + a*y2 + b*y3 + c*y4
+      dem65 =~ y5 + a*y6 + b*y7 + c*y8
+ 
+   # regressions
+     dem60 ~ ind60
+     dem65 ~ ind60 + dem60
+ 
+   # residual correlations
+     y1 ~~ y5
+     y2 ~~ y4 + y6
+     y3 ~~ y7
+     y4 ~~ y8
+     y6 ~~ y8
+ '
> fit2 <- sem(model, data=PoliticalDemocracy, meanstructure=TRUE)
> miPowerFit(fit2, stdLoad=0.3, cor=0.2, stdBeta=0.2, intcept=0.5)
     lhs op rhs group        mi       epc target.epc   std.epc std.target.epc
4  ind60 =~  y1     1 1.2752429 -0.337962    1.15949 -0.087443            0.3
5  ind60 =~  y2     1 0.5986317 -0.334336    1.70286 -0.058901            0.3
6  ind60 =~  y3     1 0.1698745 -0.177638    1.52826 -0.034871            0.3
7  ind60 =~  y4     1 3.6248665  0.645166    1.47260  0.131434            0.3
8  ind60 =~  y5     1 1.8580634  0.425645    1.18095  0.108127            0.3
9  ind60 =~  y6     1 0.2878725 -0.187725    1.52194 -0.037004            0.3
10 ind60 =~  y7     1 0.2758632 -0.201221    1.41352 -0.042706            0.3
11 ind60 =~  y8     1 0.0580136 -0.078119    1.45600 -0.016096            0.3
12 dem60 =~  x1     1 1.7122935  0.027160    0.09921  0.082132            0.3
13 dem60 =~  x2     1 0.3075573 -0.022079    0.20449 -0.032392            0.3
14 dem60 =~  x3     1 0.6928248 -0.038545    0.19028 -0.060772            0.3
15 dem60 =~  y1     1 0.1437928  0.037478    0.35276  0.031873            0.3
16 dem60 =~  y2     1 0.3908679  0.047628    0.51808  0.027580            0.3
17 dem60 =~  y3     1 1.8378309 -0.116412    0.46496 -0.075111            0.3
18 dem60 =~  y4     1 0.0035901  0.004093    0.44802  0.002741            0.3
19 dem60 =~  y5     1 0.4600728 -0.068721    0.35929 -0.057380            0.3
20 dem60 =~  y6     1 0.1120819 -0.037391    0.46303 -0.024226            0.3
21 dem60 =~  y7     1 1.2791759  0.139492    0.43005  0.097309            0.3
22 dem60 =~  y8     1 0.0018042 -0.004455    0.44297 -0.003017            0.3
23 dem65 =~  x1     1 1.6143560  0.029877    0.10141  0.088388            0.3
24 dem65 =~  x2     1 0.2965326 -0.024616    0.20902 -0.035331            0.3
25 dem65 =~  x3     1 0.6394735 -0.041859    0.19450 -0.064565            0.3
26 dem65 =~  y1     1 0.0157578  0.012371    0.36058  0.010292            0.3
27 dem65 =~  y2     1 0.2045302  0.063168    0.52956  0.035785            0.3
28 dem65 =~  y3     1 1.3402462 -0.162479    0.47527 -0.102561            0.3
29 dem65 =~  y4     1 0.1641479  0.045041    0.45796  0.029506            0.3
30 dem65 =~  y5     1 0.1552337 -0.040461    0.36726 -0.033051            0.3
31 dem65 =~  y6     1 0.3908672 -0.047628    0.47330 -0.030189            0.3
32 dem65 =~  y7     1 1.8378314  0.116412    0.43958  0.079447            0.3
33 dem65 =~  y8     1 0.0035900 -0.004093    0.45280 -0.002712            0.3
35    x1 ~~  x2     1 0.2583826 -0.053112    0.21848 -0.048619            0.2
36    x1 ~~  x3     1 0.1617887 -0.025587    0.20330 -0.025172            0.2
37    x1 ~~  y1     1 1.3084801  0.061075    0.37691  0.032408            0.2
38    x1 ~~  y2     1 2.7733610 -0.148355    0.55354 -0.053602            0.2
39    x1 ~~  y3     1 0.0189718  0.011718    0.49678  0.004718            0.2
40    x1 ~~  y4     1 0.9137512  0.064050    0.47869  0.026761            0.2
41    x1 ~~  y5     1 1.2592600  0.064017    0.38389  0.033352            0.2
42    x1 ~~  y6     1 0.0440642 -0.015021    0.49473 -0.006072            0.2
43    x1 ~~  y7     1 1.2361938 -0.081457    0.45948 -0.035456            0.2
44    x1 ~~  y8     1 0.0052944 -0.004701    0.47329 -0.001987            0.2
46    x2 ~~  x3     1 0.7584786  0.136012    0.41905  0.064915            0.2
47    x2 ~~  y1     1 1.0648536 -0.100788    0.77688 -0.025947            0.2
48    x2 ~~  y2     1 0.8355584  0.147343    1.14096  0.025828            0.2
49    x2 ~~  y3     1 0.4469439  0.103312    1.02397  0.020179            0.2
50    x2 ~~  y4     1 0.2256348 -0.057797    0.98668 -0.011715            0.2
51    x2 ~~  y5     1 0.0142816  0.012497    0.79127  0.003159            0.2
52    x2 ~~  y6     1 0.4679598 -0.088779    1.01973 -0.017412            0.2
53    x2 ~~  y7     1 0.0047702 -0.009243    0.94709 -0.001952            0.2
54    x2 ~~  y8     1 0.2933168  0.063662    0.97556  0.013051            0.2
56    x3 ~~  y1     1 0.5575905 -0.090705    0.72291 -0.025094            0.2
57    x3 ~~  y2     1 0.1123423 -0.068010    1.06169 -0.012812            0.2
58    x3 ~~  y3     1 0.6604979 -0.157435    0.95283 -0.033046            0.2
59    x3 ~~  y4     1 0.7236487  0.129802    0.91813  0.028275            0.2
60    x3 ~~  y5     1 0.1276051 -0.046253    0.73629 -0.012564            0.2
61    x3 ~~  y6     1 1.4491621  0.196077    0.94889  0.041328            0.2
62    x3 ~~  y7     1 0.3151511  0.093414    0.88129  0.021199            0.2
63    x3 ~~  y8     1 0.9619974 -0.144090    0.90778 -0.031746            0.2
65    y1 ~~  y2     1 0.0888638 -0.128980    1.96829 -0.013106            0.2
66    y1 ~~  y3     1 2.8412370  0.737775    1.76648  0.083531            0.2
67    y1 ~~  y4     1 0.5203584 -0.266686    1.70214 -0.031335            0.2
69    y1 ~~  y6     1 1.7713530  0.454621    1.75917  0.051686            0.2
70    y1 ~~  y7     1 0.2763302 -0.200276    1.63385 -0.024516            0.2
71    y1 ~~  y8     1 0.1902242 -0.141872    1.68295 -0.016860            0.2
73    y2 ~~  y3     1 0.8079829 -0.597610    2.59431 -0.046071            0.2
75    y2 ~~  y5     1 0.1345625  0.162330    2.00473  0.016195            0.2
77    y2 ~~  y7     1 0.8732059  0.531530    2.39952  0.044303            0.2
78    y2 ~~  y8     1 1.0406293  0.691085    2.47164  0.055921            0.2
80    y3 ~~  y4     1 0.0510848  0.119290    2.24351  0.010634            0.2
81    y3 ~~  y5     1 0.0006084 -0.011161    1.79919 -0.001241            0.2
82    y3 ~~  y6     1 1.5527919 -0.661816    2.31867 -0.057086            0.2
84    y3 ~~  y8     1 0.8202405 -0.446788    2.21822 -0.040283            0.2
86    y4 ~~  y5     1 0.0532645 -0.083123    1.73365 -0.009589            0.2
87    y4 ~~  y6     1 0.6534587  0.462183    2.23422  0.041373            0.2
88    y4 ~~  y7     1 0.4274479 -0.294699    2.07506 -0.028404            0.2
91    y5 ~~  y6     1 0.8603644 -0.336167    1.79174 -0.037524            0.2
92    y5 ~~  y7     1 0.2736913  0.207758    1.66410  0.024969            0.2
93    y5 ~~  y8     1 0.4852362 -0.237760    1.71412 -0.027741            0.2
95    y6 ~~  y7     1 0.1657003 -0.189862    2.14458 -0.017706            0.2
98    y7 ~~  y8     1 2.4812627  0.691278    2.05167  0.067387            0.2
   significant.mi high.power decision
4           FALSE       TRUE       NM
5           FALSE       TRUE       NM
6           FALSE       TRUE       NM
7           FALSE       TRUE       NM
8           FALSE       TRUE       NM
9           FALSE       TRUE       NM
10          FALSE       TRUE       NM
11          FALSE       TRUE       NM
12          FALSE       TRUE       NM
13          FALSE       TRUE       NM
14          FALSE       TRUE       NM
15          FALSE       TRUE       NM
16          FALSE       TRUE       NM
17          FALSE       TRUE       NM
18          FALSE       TRUE       NM
19          FALSE       TRUE       NM
20          FALSE       TRUE       NM
21          FALSE       TRUE       NM
22          FALSE       TRUE       NM
23          FALSE       TRUE       NM
24          FALSE       TRUE       NM
25          FALSE       TRUE       NM
26          FALSE       TRUE       NM
27          FALSE       TRUE       NM
28          FALSE       TRUE       NM
29          FALSE       TRUE       NM
30          FALSE       TRUE       NM
31          FALSE       TRUE       NM
32          FALSE       TRUE       NM
33          FALSE       TRUE       NM
35          FALSE      FALSE        I
36          FALSE       TRUE       NM
37          FALSE       TRUE       NM
38          FALSE       TRUE       NM
39          FALSE       TRUE       NM
40          FALSE       TRUE       NM
41          FALSE       TRUE       NM
42          FALSE       TRUE       NM
43          FALSE       TRUE       NM
44          FALSE       TRUE       NM
46          FALSE      FALSE        I
47          FALSE       TRUE       NM
48          FALSE       TRUE       NM
49          FALSE       TRUE       NM
50          FALSE       TRUE       NM
51          FALSE       TRUE       NM
52          FALSE       TRUE       NM
53          FALSE       TRUE       NM
54          FALSE       TRUE       NM
56          FALSE       TRUE       NM
57          FALSE       TRUE       NM
58          FALSE       TRUE       NM
59          FALSE       TRUE       NM
60          FALSE       TRUE       NM
61          FALSE       TRUE       NM
62          FALSE       TRUE       NM
63          FALSE       TRUE       NM
65          FALSE       TRUE       NM
66          FALSE       TRUE       NM
67          FALSE       TRUE       NM
69          FALSE       TRUE       NM
70          FALSE       TRUE       NM
71          FALSE       TRUE       NM
73          FALSE       TRUE       NM
75          FALSE       TRUE       NM
77          FALSE       TRUE       NM
78          FALSE       TRUE       NM
80          FALSE       TRUE       NM
81          FALSE       TRUE       NM
82          FALSE       TRUE       NM
84          FALSE       TRUE       NM
86          FALSE       TRUE       NM
87          FALSE       TRUE       NM
88          FALSE       TRUE       NM
91          FALSE       TRUE       NM
92          FALSE       TRUE       NM
93          FALSE       TRUE       NM
95          FALSE       TRUE       NM
98          FALSE       TRUE       NM
> 
> 
> 
> cleanEx()
> nameEx("monteCarloMed")
> ### * monteCarloMed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: monteCarloMed
> ### Title: Monte Carlo Confidence Intervals to Test Complex Indirect
> ###   Effects
> ### Aliases: monteCarloMed
> 
> ### ** Examples
> 
> #Simple two path mediation
> #Write expression of indirect effect
> med <- 'a*b'
> #Paramter values from analyses
> aparam <- 1
> bparam<-2
> #Asymptotic covariance matrix from analyses
> AC <- matrix(c(.01,.00002,
+                .00002,.02), nrow=2, byrow=TRUE)
> #Compute CI, include a plot
> monteCarloMed(med, coef1=aparam, coef2=bparam, outputValues=FALSE, plot=TRUE, ACM=AC)
$`Point Estimate`
[1] 2

$`95% Confidence Interval`
         
LL 1.5326
UL 2.5028

> 
> #Use a matrix of parameter estimates as input
> aparam<-c(1,2)
> monteCarloMed(med, coef1=aparam, outputValues=FALSE, plot=TRUE, ACM=AC)
$`Point Estimate`
[1] 2

$`95% Confidence Interval`
         
LL 1.5383
UL 2.4950

> 
> 
> 
> #complex mediation with two paths for the indirect effect
> #Write expression of indirect effect
> med <- 'a1*b1 + a1*b2'
> #Paramter values and standard errors from analyses
> aparam <- 1
> b1param<-2
> b2param<-1
> #Asymptotic covariance matrix from analyses
> AC <- matrix(c(1,.00002, .00003,
+                     .00002,1, .00002,
+ 					.00003, .00002, 1), nrow=3, byrow=TRUE)
> #Compute CI do not include a plot
> monteCarloMed(med, coef1=aparam, coef2=b1param, coef3=b2param, ACM=AC)
$`Point Estimate`
[1] 3

$`95% Confidence Interval`
          
LL -3.1105
UL 11.4472

> 
> 
> 
> cleanEx()
> nameEx("moreFitIndices")
> ### * moreFitIndices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moreFitIndices
> ### Title: Calculate more fit indices
> ### Aliases: moreFitIndices
> 
> ### ** Examples
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939)
> moreFitIndices(fit)
      gammaHat    adjGammaHat baseline.rmsea     aic.smallN     bic.priorN 
     0.9565611      0.9185521      0.2854364   7476.5731866   7544.0149775 
           hqc            sic 
  7517.2909607   3794.0917612 
> 
> fit2 <- cfa(HS.model, data=HolzingerSwineford1939, estimator="mlr")
> moreFitIndices(fit2)
             gammaHat           adjGammaHat        baseline.rmsea 
            0.9565611             0.9185521             0.2854364 
           aic.smallN            bic.priorN                   hqc 
         7476.5731866          7544.0149775          7517.2909607 
      gammaHat.scaled    adjGammaHat.scaled baseline.rmsea.scaled 
            0.9553250             0.9162344             0.3558017 
> 
> 
> 
> cleanEx()
> nameEx("nullMx")
> ### * nullMx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nullMx
> ### Title: Analyzing data using a null model
> ### Aliases: nullMx
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(OpenMx)
> ##D data(demoOneFactor)
> ##D nullModel <- nullMx(demoOneFactor)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nullRMSEA")
> ### * nullRMSEA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nullRMSEA
> ### Title: Calculate the RMSEA of the null model
> ### Aliases: nullRMSEA
> 
> ### ** Examples
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939)
> nullRMSEA(fit)
Baseline RMSEA: 0.285
> 
> 
> 
> cleanEx()
> nameEx("parcelAllocation")
> ### * parcelAllocation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parcelAllocation
> ### Title: Random Allocation of Items to Parcels in a Structural Equation
> ###   Model
> ### Aliases: parcelAllocation
> 
> ### ** Examples
> 
> #Fit 3 factor CFA to simulated data.
> #Each factor has 9 indicators that are randomly parceled into 3 parcels
> #Lavaan syntax for the model to be fit to parceled data
> syntax <- 'La =~ V1 + V2 + V3 
+            Lb =~ V4 + V5 + V6
+ '
> #Parcel and fit data 20 times. The actual parcel number should be higher than 20 times.
> name1 <- colnames(simParcel)[1:9]
> name2 <- colnames(simParcel)[10:18]
> parcelAllocation(list(c(3,3,3),c(3,3,3)), list(name1, name2), nAlloc=20, syntax=syntax, dataset=simParcel)
$Estimates
   lhs op rhs   est  S.D.   MAX   MIN Range % Sig
1   La =~  V1 1.000 0.000 1.000 1.000 0.000    NA
2   La =~  V2 0.995 0.054 1.130 0.912 0.218     1
3   La =~  V3 1.002 0.047 1.090 0.926 0.164     1
4   Lb =~  V4 1.000 0.000 1.000 1.000 0.000    NA
5   Lb =~  V5 0.987 0.041 1.070 0.902 0.168     1
6   Lb =~  V6 0.994 0.047 1.062 0.898 0.164     1
7   V1 ~~  V1 0.219 0.014 0.247 0.196 0.052     1
8   V2 ~~  V2 0.211 0.017 0.237 0.174 0.063     1
9   V3 ~~  V3 0.203 0.018 0.240 0.162 0.078     1
10  V4 ~~  V4 0.208 0.020 0.240 0.165 0.075     1
11  V5 ~~  V5 0.216 0.018 0.249 0.187 0.062     1
12  V6 ~~  V6 0.206 0.019 0.240 0.161 0.079     1
13  La ~~  La 0.377 0.021 0.398 0.326 0.072     1
14  Lb ~~  Lb 0.361 0.019 0.395 0.329 0.066     1
15  La ~~  Lb 0.195 0.007 0.208 0.180 0.028     1

$SE
   lhs op rhs Avg SE  S.D.   MAX   MIN Range
1   La =~  V1  0.000 0.000 0.000 0.000 0.000
2   La =~  V2  0.046 0.003 0.054 0.041 0.013
3   La =~  V3  0.046 0.003 0.052 0.041 0.011
4   Lb =~  V4  0.000 0.000 0.000 0.000 0.000
5   Lb =~  V5  0.047 0.002 0.050 0.044 0.007
6   Lb =~  V6  0.047 0.002 0.049 0.041 0.008
7   V1 ~~  V1  0.016 0.001 0.018 0.015 0.003
8   V2 ~~  V2  0.016 0.001 0.018 0.015 0.003
9   V3 ~~  V3  0.016 0.001 0.017 0.014 0.003
10  V4 ~~  V4  0.016 0.001 0.018 0.014 0.004
11  V5 ~~  V5  0.016 0.001 0.018 0.015 0.003
12  V6 ~~  V6  0.016 0.001 0.017 0.014 0.003
13  La ~~  La  0.030 0.001 0.032 0.028 0.005
14  Lb ~~  Lb  0.029 0.001 0.032 0.028 0.004
15  La ~~  Lb  0.019 0.001 0.020 0.017 0.003

$Fit
      Avg Ind  S.D.    MAX   MIN  Range
chisq   6.906 3.652 14.543 1.456 13.087
cfi     0.999 0.001  1.000 0.997  0.003
tli     1.001 0.003  1.006 0.994  0.012
rmsea   0.007 0.011  0.032 0.000  0.032
srmr    0.011 0.003  0.019 0.006  0.013

> 
> 
> 
> cleanEx()
> nameEx("plotProbe")
> ### * plotProbe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotProbe
> ### Title: Plot the graphs for probing latent interaction
> ### Aliases: plotProbe
> 
> ### ** Examples
> 
> library(lavaan) 
> 
> dat2wayMC <- indProd(dat2way, 1:3, 4:6)
> 
> model1 <- "
+ f1 =~ x1 + x2 + x3
+ f2 =~ x4 + x5 + x6
+ f12 =~ x1.x4 + x2.x5 + x3.x6
+ f3 =~ x7 + x8 + x9
+ f3 ~ f1 + f2 + f12
+ f12 ~~0*f1
+ f12 ~~ 0*f2
+ x1 ~ 0*1
+ x4 ~ 0*1
+ x1.x4 ~ 0*1
+ x7 ~ 0*1
+ f1 ~ NA*1
+ f2 ~ NA*1
+ f12 ~ NA*1
+ f3 ~ NA*1
+ "
> 
> fitMC2way <- sem(model1, data=dat2wayMC, meanstructure=TRUE, std.lv=FALSE)
> result2wayMC <- probe2WayMC(fitMC2way, c("f1", "f2", "f12"), "f3", "f2", c(-1, 0, 1))
> plotProbe(result2wayMC, xlim=c(-2, 2))
> 
> 
> dat3wayMC <- indProd(dat3way, 1:3, 4:6, 7:9)
> 
> model3 <- "
+ f1 =~ x1 + x2 + x3
+ f2 =~ x4 + x5 + x6
+ f3 =~ x7 + x8 + x9
+ f12 =~ x1.x4 + x2.x5 + x3.x6
+ f13 =~ x1.x7 + x2.x8 + x3.x9
+ f23 =~ x4.x7 + x5.x8 + x6.x9
+ f123 =~ x1.x4.x7 + x2.x5.x8 + x3.x6.x9
+ f4 =~ x10 + x11 + x12
+ f4 ~ f1 + f2 + f3 + f12 + f13 + f23 + f123
+ f1 ~~ 0*f12
+ f1 ~~ 0*f13
+ f1 ~~ 0*f123
+ f2 ~~ 0*f12
+ f2 ~~ 0*f23
+ f2 ~~ 0*f123
+ f3 ~~ 0*f13
+ f3 ~~ 0*f23
+ f3 ~~ 0*f123
+ f12 ~~ 0*f123
+ f13 ~~ 0*f123
+ f23 ~~ 0*f123
+ x1 ~ 0*1
+ x4 ~ 0*1
+ x7 ~ 0*1
+ x10 ~ 0*1
+ x1.x4 ~ 0*1
+ x1.x7 ~ 0*1
+ x4.x7 ~ 0*1
+ x1.x4.x7 ~ 0*1
+ f1 ~ NA*1
+ f2 ~ NA*1
+ f3 ~ NA*1
+ f12 ~ NA*1
+ f13 ~ NA*1
+ f23 ~ NA*1
+ f123 ~ NA*1
+ f4 ~ NA*1
+ " 
> 
> fitMC3way <- sem(model3, data=dat3wayMC, meanstructure=TRUE, std.lv=FALSE)
> result3wayMC <- probe3WayMC(fitMC3way, c("f1", "f2", "f3", "f12", "f13", "f23", "f123"), "f4", c("f1", "f2"), c(-1, 0, 1), c(-1, 0, 1))
> plotProbe(result3wayMC, xlim=c(-2, 2))
> 
> 
> 
> cleanEx()
> nameEx("plotRMSEAdist")
> ### * plotRMSEAdist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotRMSEAdist
> ### Title: Plot the sampling distributions of RMSEA
> ### Aliases: plotRMSEAdist
> 
> ### ** Examples
> 
> plotRMSEAdist(rmsea=c(.05, .08), n=200, df=20, ptile=0.95, rmseaScale = TRUE)
Warning in plotRMSEAdist(rmsea = c(0.05, 0.08), n = 200, df = 20, ptile = 0.95,  :
  The density at RMSEA = 0 cannot be trusted because the plots are truncated.
> plotRMSEAdist(rmsea=c(.05, .01), n=200, df=20, ptile=0.05, rmseaScale = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("plotRMSEApower")
> ### * plotRMSEApower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotRMSEApower
> ### Title: Plot power curves for RMSEA
> ### Aliases: plotRMSEApower
> 
> ### ** Examples
> 
> plotRMSEApower(.025, .075, 23, 100, 500, 10)
> 
> 
> 
> cleanEx()
> nameEx("plotRMSEApowernested")
> ### * plotRMSEApowernested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotRMSEApowernested
> ### Title: Plot power of nested model RMSEA
> ### Aliases: plotRMSEApowernested
> 
> ### ** Examples
> 
> plotRMSEApowernested(rmsea0A = 0, rmsea0B = 0, rmsea1A = 0.06, rmsea1B = 0.05, 
+ dfA=22, dfB=20, nlow=50, nhigh=500, steps=1, alpha=.05, group=1)  
> 
> 
> 
> cleanEx()
> nameEx("probe2WayMC")
> ### * probe2WayMC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: probe2WayMC
> ### Title: Probing two-way interaction on the residual-centered latent
> ###   interaction
> ### Aliases: probe2WayMC
> 
> ### ** Examples
> 
> library(lavaan) 
> 
> dat2wayMC <- indProd(dat2way, 1:3, 4:6)
> 
> model1 <- "
+ f1 =~ x1 + x2 + x3
+ f2 =~ x4 + x5 + x6
+ f12 =~ x1.x4 + x2.x5 + x3.x6
+ f3 =~ x7 + x8 + x9
+ f3 ~ f1 + f2 + f12
+ f12 ~~0*f1
+ f12 ~~ 0*f2
+ x1 ~ 0*1
+ x4 ~ 0*1
+ x1.x4 ~ 0*1
+ x7 ~ 0*1
+ f1 ~ NA*1
+ f2 ~ NA*1
+ f12 ~ NA*1
+ f3 ~ NA*1
+ "
> 
> fitMC2way <- sem(model1, data=dat2wayMC, meanstructure=TRUE, std.lv=FALSE)
> summary(fitMC2way)
lavaan (0.5-10) converged normally after  53 iterations

  Number of observations                         10000

  Estimator                                         ML
  Minimum Function Chi-square                   28.376
  Degrees of freedom                                50
  P-value                                        0.994

Parameter estimates:

  Information                                 Expected
  Standard Errors                             Standard

                   Estimate  Std.err  Z-value  P(>|z|)
Latent variables:
  f1 =~
    x1                1.000
    x2                0.996    0.018   55.194    0.000
    x3                1.008    0.018   55.393    0.000
  f2 =~
    x4                1.000
    x5                0.999    0.018   54.472    0.000
    x6                0.984    0.018   54.181    0.000
  f12 =~
    x1.x4             1.000
    x2.x5             0.964    0.038   25.297    0.000
    x3.x6             0.962    0.038   25.324    0.000
  f3 =~
    x7                1.000
    x8                1.019    0.020   50.206    0.000
    x9                1.003    0.020   49.801    0.000

Regressions:
  f3 ~
    f1                0.418    0.014   30.638    0.000
    f2                0.395    0.014   29.183    0.000
    f12               0.194    0.011   17.377    0.000

Covariances:
  f1 ~~
    f12               0.000
  f2 ~~
    f12               0.000
  f1 ~~
    f2                0.491    0.016   30.939    0.000

Intercepts:
    x1                0.000
    x4                0.000
    x1.x4             0.000
    x7                0.000
    f1               -0.000    0.014   -0.000    1.000
    f2               -0.000    0.014   -0.000    1.000
    f12              -0.000    0.020   -0.000    1.000
    f3                0.100    0.013    7.790    0.000
    x2                0.000    0.014    0.000    1.000
    x3                0.000    0.014    0.000    1.000
    x5                0.000    0.014    0.000    1.000
    x6                0.000    0.014    0.000    1.000
    x2.x5             0.000    0.024    0.000    1.000
    x3.x6             0.000    0.024    0.000    1.000
    x8               -0.002    0.014   -0.132    0.895
    x9               -0.000    0.014   -0.023    0.982

Variances:
    x1                0.995    0.020
    x2                1.004    0.020
    x3                1.001    0.020
    x4                1.007    0.020
    x5                0.991    0.020
    x6                1.002    0.020
    x1.x4             2.875    0.065
    x2.x5             3.002    0.063
    x3.x6             3.138    0.065
    x7                1.014    0.018
    x8                0.987    0.018
    x9                0.999    0.018
    f1                0.988    0.028
    f2                0.981    0.028
    f12               1.261    0.066
    f3                0.194    0.011

> 
> result2wayMC <- probe2WayMC(fitMC2way, c("f1", "f2", "f12"), "f3", "f2", c(-1, 0, 1))
> result2wayMC
$SimpleIntcept
     f2    Intcept         SE       Wald p
[1,] -1 -0.2950167 0.01865339 -15.815710 0
[2,]  0  0.0999901 0.01283510   7.790361 0
[3,]  1  0.4949969 0.01865340  26.536555 0

$SimpleSlope
     f2     Slope         SE     Wald p
[1,] -1 0.2238276 0.01696603 13.19269 0
[2,]  0 0.4176235 0.01363090 30.63801 0
[3,]  1 0.6114195 0.01823499 33.53001 0

> 
> 
> 
> cleanEx()
> nameEx("probe2WayRC")
> ### * probe2WayRC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: probe2WayRC
> ### Title: Probing two-way interaction on the residual-centered latent
> ###   interaction
> ### Aliases: probe2WayRC
> 
> ### ** Examples
> 
> library(lavaan) 
> 
> dat2wayRC <- orthogonalize(dat2way, 1:3, 4:6)
> 
> model1 <- "
+ f1 =~ x1 + x2 + x3
+ f2 =~ x4 + x5 + x6
+ f12 =~ x1.x4 + x2.x5 + x3.x6
+ f3 =~ x7 + x8 + x9
+ f3 ~ f1 + f2 + f12
+ f12 ~~0*f1
+ f12 ~~ 0*f2
+ x1 ~ 0*1
+ x4 ~ 0*1
+ x1.x4 ~ 0*1
+ x7 ~ 0*1
+ f1 ~ NA*1
+ f2 ~ NA*1
+ f12 ~ NA*1
+ f3 ~ NA*1
+ "
> 
> fitRC2way <- sem(model1, data=dat2wayRC, meanstructure=TRUE, std.lv=FALSE)
> summary(fitRC2way)
lavaan (0.5-10) converged normally after  53 iterations

  Number of observations                         10000

  Estimator                                         ML
  Minimum Function Chi-square                   11.737
  Degrees of freedom                                50
  P-value                                        1.000

Parameter estimates:

  Information                                 Expected
  Standard Errors                             Standard

                   Estimate  Std.err  Z-value  P(>|z|)
Latent variables:
  f1 =~
    x1                1.000
    x2                0.994    0.018   55.226    0.000
    x3                1.006    0.018   55.396    0.000
  f2 =~
    x4                1.000
    x5                0.998    0.018   54.486    0.000
    x6                0.983    0.018   54.193    0.000
  f12 =~
    x1.x4             1.000
    x2.x5             0.964    0.038   25.295    0.000
    x3.x6             0.962    0.038   25.322    0.000
  f3 =~
    x7                1.000
    x8                1.019    0.020   50.213    0.000
    x9                1.003    0.020   49.808    0.000

Regressions:
  f3 ~
    f1                0.417    0.014   30.632    0.000
    f2                0.395    0.014   29.206    0.000
    f12               0.194    0.011   17.384    0.000

Covariances:
  f1 ~~
    f12               0.000
  f2 ~~
    f12               0.000
  f1 ~~
    f2                0.492    0.016   30.957    0.000

Intercepts:
    x1                0.000
    x4                0.000
    x1.x4             0.000
    x7                0.000
    f1               -0.000    0.014   -0.000    1.000
    f2               -0.000    0.014   -0.000    1.000
    f12              -0.000    0.020   -0.000    1.000
    f3                0.100    0.013    7.794    0.000
    x2                0.000    0.014    0.000    1.000
    x3                0.000    0.014    0.000    1.000
    x5                0.000    0.014    0.000    1.000
    x6                0.000    0.014    0.000    1.000
    x2.x5             0.000    0.024    0.000    1.000
    x3.x6             0.000    0.024    0.000    1.000
    x8               -0.002    0.014   -0.132    0.895
    x9               -0.000    0.014   -0.023    0.982

Variances:
    x1                0.992    0.020
    x2                1.004    0.020
    x3                1.003    0.020
    x4                1.006    0.020
    x5                0.991    0.020
    x6                1.003    0.020
    x1.x4             2.872    0.065
    x2.x5             3.001    0.063
    x3.x6             3.138    0.065
    x7                1.014    0.018
    x8                0.987    0.018
    x9                0.999    0.018
    f1                0.991    0.028
    f2                0.982    0.028
    f12               1.260    0.066
    f3                0.194    0.011

> 
> result2wayRC <- probe2WayRC(fitRC2way, c("f1", "f2", "f12"), "f3", "f2", c(-1, 0, 1))
> result2wayRC
$SimpleIntcept
     f2      Intcept         SE        Wald        p
[1,] -1 -0.390416328 0.01958671 -19.9327171 0.000000
[2,]  0  0.004669488 0.01410860   0.3309676 0.740669
[3,]  1  0.399755304 0.01958671  20.4095183 0.000000

$SimpleSlope
     f2     Slope         SE     Wald p
[1,] -1 0.2229033 0.01713558 13.00822 0
[2,]  0 0.4168256 0.01366659 30.49961 0
[3,]  1 0.6107478 0.01844686 33.10849 0

> 
> 
> 
> cleanEx()
> nameEx("probe3WayMC")
> ### * probe3WayMC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: probe3WayMC
> ### Title: Probing two-way interaction on the residual-centered latent
> ###   interaction
> ### Aliases: probe3WayMC
> 
> ### ** Examples
> 
> library(lavaan)
> 
> dat3wayMC <- indProd(dat3way, 1:3, 4:6, 7:9)
> 
> model3 <- "
+ f1 =~ x1 + x2 + x3
+ f2 =~ x4 + x5 + x6
+ f3 =~ x7 + x8 + x9
+ f12 =~ x1.x4 + x2.x5 + x3.x6
+ f13 =~ x1.x7 + x2.x8 + x3.x9
+ f23 =~ x4.x7 + x5.x8 + x6.x9
+ f123 =~ x1.x4.x7 + x2.x5.x8 + x3.x6.x9
+ f4 =~ x10 + x11 + x12
+ f4 ~ f1 + f2 + f3 + f12 + f13 + f23 + f123
+ f1 ~~ 0*f12
+ f1 ~~ 0*f13
+ f1 ~~ 0*f123
+ f2 ~~ 0*f12
+ f2 ~~ 0*f23
+ f2 ~~ 0*f123
+ f3 ~~ 0*f13
+ f3 ~~ 0*f23
+ f3 ~~ 0*f123
+ f12 ~~ 0*f123
+ f13 ~~ 0*f123
+ f23 ~~ 0*f123
+ x1 ~ 0*1
+ x4 ~ 0*1
+ x7 ~ 0*1
+ x10 ~ 0*1
+ x1.x4 ~ 0*1
+ x1.x7 ~ 0*1
+ x4.x7 ~ 0*1
+ x1.x4.x7 ~ 0*1
+ f1 ~ NA*1
+ f2 ~ NA*1
+ f3 ~ NA*1
+ f12 ~ NA*1
+ f13 ~ NA*1
+ f23 ~ NA*1
+ f123 ~ NA*1
+ f4 ~ NA*1
+ " 
> 
> fitMC3way <- sem(model3, data=dat3wayMC, meanstructure=TRUE, std.lv=FALSE)
> summary(fitMC3way)
lavaan (0.5-10) converged normally after 104 iterations

  Number of observations                          1000

  Estimator                                         ML
  Minimum Function Chi-square                  394.539
  Degrees of freedom                               236
  P-value                                        0.000

Parameter estimates:

  Information                                 Expected
  Standard Errors                             Standard

                   Estimate  Std.err  Z-value  P(>|z|)
Latent variables:
  f1 =~
    x1                1.000
    x2                1.073    0.065   16.552    0.000
    x3                1.118    0.067   16.584    0.000
  f2 =~
    x4                1.000
    x5                0.991    0.061   16.368    0.000
    x6                0.950    0.058   16.297    0.000
  f3 =~
    x7                1.000
    x8                0.980    0.059   16.511    0.000
    x9                0.997    0.060   16.524    0.000
  f12 =~
    x1.x4             1.000
    x2.x5             1.315    0.156    8.416    0.000
    x3.x6             1.246    0.147    8.484    0.000
  f13 =~
    x1.x7             1.000
    x2.x8             0.856    0.118    7.248    0.000
    x3.x9             0.920    0.127    7.232    0.000
  f23 =~
    x4.x7             1.000
    x5.x8             1.077    0.160    6.720    0.000
    x6.x9             1.105    0.165    6.698    0.000
  f123 =~
    x1.x4.x7          1.000
    x2.x5.x8          1.504    0.291    5.166    0.000
    x3.x6.x9          1.151    0.213    5.393    0.000
  f4 =~
    x10               1.000
    x11               1.030    0.036   28.809    0.000
    x12               0.959    0.034   28.404    0.000

Regressions:
  f4 ~
    f1                0.353    0.059    6.005    0.000
    f2                0.386    0.055    6.983    0.000
    f3                0.376    0.056    6.770    0.000
    f12               0.065    0.069    0.943    0.346
    f13               0.033    0.060    0.553    0.580
    f23               0.137    0.074    1.867    0.062
    f123              0.376    0.081    4.633    0.000

Covariances:
  f1 ~~
    f12               0.000
    f13               0.000
    f123              0.000
  f2 ~~
    f12               0.000
    f23               0.000
    f123              0.000
  f3 ~~
    f13               0.000
    f23               0.000
    f123              0.000
  f12 ~~
    f123              0.000
  f13 ~~
    f123              0.000
  f23 ~~
    f123              0.000
  f1 ~~
    f2                0.110    0.042    2.632    0.008
    f3                0.122    0.042    2.924    0.003
    f23               0.057    0.048    1.201    0.230
  f2 ~~
    f3                0.101    0.044    2.280    0.023
    f13               0.019    0.058    0.325    0.745
  f3 ~~
    f12               0.054    0.047    1.149    0.251
  f12 ~~
    f13               0.275    0.071    3.889    0.000
    f23               0.192    0.061    3.169    0.002
  f13 ~~
    f23               0.225    0.074    3.048    0.002

Intercepts:
    x1                0.000
    x4                0.000
    x7                0.000
    x10               0.000
    x1.x4             0.000
    x1.x7             0.000
    x4.x7             0.000
    x1.x4.x7          0.000
    f1                0.000    0.044    0.000    1.000
    f2                0.000    0.045    0.000    1.000
    f3                0.000    0.046    0.000    1.000
    f12              -0.000    0.063   -0.000    1.000
    f13               0.000    0.064    0.000    1.000
    f23               0.000    0.066    0.000    1.000
    f123             -0.000    0.094   -0.000    1.000
    f4                0.026    0.064    0.403    0.687
    x2               -0.000    0.047   -0.000    1.000
    x3               -0.000    0.047   -0.000    1.000
    x5               -0.000    0.044   -0.000    1.000
    x6               -0.000    0.044   -0.000    1.000
    x8               -0.000    0.044   -0.000    1.000
    x9               -0.000    0.045   -0.000    1.000
    x2.x5             0.000    0.091    0.000    1.000
    x3.x6             0.000    0.087    0.000    1.000
    x2.x8             0.000    0.072    0.000    1.000
    x3.x9            -0.000    0.075   -0.000    1.000
    x5.x8            -0.000    0.084   -0.000    1.000
    x6.x9            -0.000    0.086   -0.000    1.000
    x2.x5.x8          0.000    0.156    0.000    1.000
    x3.x6.x9          0.000    0.136    0.000    1.000
    x11              -0.001    0.046   -0.017    0.986
    x12               0.001    0.044    0.024    0.981

Variances:
    x1                1.008    0.065
    x2                1.007    0.070
    x3                0.974    0.073
    x4                0.984    0.070
    x5                0.995    0.070
    x6                1.016    0.067
    x7                1.029    0.071
    x8                0.978    0.067
    x9                0.989    0.069
    x1.x4             3.039    0.178
    x2.x5             2.979    0.234
    x3.x6             2.931    0.217
    x1.x7             2.807    0.223
    x2.x8             3.136    0.197
    x3.x9             3.305    0.217
    x4.x7             3.418    0.214
    x5.x8             3.151    0.222
    x6.x9             3.182    0.229
    x1.x4.x7          7.504    0.429
    x2.x5.x8          7.266    0.646
    x3.x6.x9          8.579    0.517
    x10               1.002    0.069
    x11               1.008    0.071
    x12               0.978    0.065
    f1                0.922    0.087
    f2                1.053    0.097
    f3                1.045    0.097
    f12               0.940    0.162
    f13               1.316    0.228
    f23               0.941    0.193
    f123              1.255    0.335
    f4                1.558    0.121

> 
> result3wayMC <- probe3WayMC(fitMC3way, c("f1", "f2", "f3", "f12", "f13", "f23", "f123"), "f4", c("f1", "f2"), c(-1, 0, 1), c(-1, 0, 1))
> result3wayMC
$SimpleIntcept
  f1 f2      Intcept         SE        Wald            p
1 -1 -1 -0.648032141 0.11996551 -5.40182055 6.596793e-08
2  0 -1 -0.359974566 0.08469975 -4.25000749 2.137634e-05
3  1 -1 -0.071916991 0.12585159 -0.57144286 5.676995e-01
4 -1  0 -0.327070339 0.08703275 -3.75801472 1.712668e-04
5  0  0  0.025872146 0.06419107  0.40304901 6.869122e-01
6  1  0  0.378814632 0.08703275  4.35255267 1.345615e-05
7 -1  1 -0.006108538 0.12693785 -0.04812227 9.616188e-01
8  0  1  0.411718858 0.08469974  4.86092261 1.168399e-06
9  1  1  0.829546255 0.12286532  6.75167147 1.461520e-11

$SimpleSlope
  f1 f2      Slope         SE       Wald        p
1 -1 -1  0.5813420 0.12825599  4.5326693 0.000006
2  0 -1  0.2383870 0.09074566  2.6269794 0.008615
3  1 -1 -0.1045680 0.14310184 -0.7307246 0.464947
4 -1  0  0.3423548 0.08105664  4.2236491 0.000024
5  0  0  0.3757295 0.05550150  6.7697181 0.000000
6  1  0  0.4091042 0.08289895  4.9349738 0.000001
7 -1  1  0.1033676 0.14361847  0.7197374 0.471687
8  0  1  0.5130720 0.09353423  5.4853928 0.000000
9  1  1  0.9227764 0.13179573  7.0015650 0.000000

> 
> 
> 
> cleanEx()
> nameEx("probe3WayRC")
> ### * probe3WayRC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: probe3WayRC
> ### Title: Probing three-way interaction on the residual-centered latent
> ###   interaction
> ### Aliases: probe3WayRC
> 
> ### ** Examples
> 
> library(lavaan)
> 
> dat3wayRC <- orthogonalize(dat3way, 1:3, 4:6, 7:9)
> 
> model3 <- "
+ f1 =~ x1 + x2 + x3
+ f2 =~ x4 + x5 + x6
+ f3 =~ x7 + x8 + x9
+ f12 =~ x1.x4 + x2.x5 + x3.x6
+ f13 =~ x1.x7 + x2.x8 + x3.x9
+ f23 =~ x4.x7 + x5.x8 + x6.x9
+ f123 =~ x1.x4.x7 + x2.x5.x8 + x3.x6.x9
+ f4 =~ x10 + x11 + x12
+ f4 ~ f1 + f2 + f3 + f12 + f13 + f23 + f123
+ f1 ~~ 0*f12
+ f1 ~~ 0*f13
+ f1 ~~ 0*f123
+ f2 ~~ 0*f12
+ f2 ~~ 0*f23
+ f2 ~~ 0*f123
+ f3 ~~ 0*f13
+ f3 ~~ 0*f23
+ f3 ~~ 0*f123
+ f12 ~~ 0*f123
+ f13 ~~ 0*f123
+ f23 ~~ 0*f123
+ x1 ~ 0*1
+ x4 ~ 0*1
+ x7 ~ 0*1
+ x10 ~ 0*1
+ x1.x4 ~ 0*1
+ x1.x7 ~ 0*1
+ x4.x7 ~ 0*1
+ x1.x4.x7 ~ 0*1
+ f1 ~ NA*1
+ f2 ~ NA*1
+ f3 ~ NA*1
+ f12 ~ NA*1
+ f13 ~ NA*1
+ f23 ~ NA*1
+ f123 ~ NA*1
+ f4 ~ NA*1
+ " 
> 
> fitRC3way <- sem(model3, data=dat3wayRC, meanstructure=TRUE, std.lv=FALSE)
> summary(fitRC3way)
lavaan (0.5-10) converged normally after 107 iterations

  Number of observations                          1000

  Estimator                                         ML
  Minimum Function Chi-square                  108.492
  Degrees of freedom                               236
  P-value                                        1.000

Parameter estimates:

  Information                                 Expected
  Standard Errors                             Standard

                   Estimate  Std.err  Z-value  P(>|z|)
Latent variables:
  f1 =~
    x1                1.000
    x2                1.070    0.065   16.584    0.000
    x3                1.118    0.067   16.627    0.000
  f2 =~
    x4                1.000
    x5                0.992    0.060   16.411    0.000
    x6                0.954    0.058   16.342    0.000
  f3 =~
    x7                1.000
    x8                0.979    0.059   16.543    0.000
    x9                0.993    0.060   16.552    0.000
  f12 =~
    x1.x4             1.000
    x2.x5             1.288    0.152    8.467    0.000
    x3.x6             1.239    0.146    8.502    0.000
  f13 =~
    x1.x7             1.000
    x2.x8             0.837    0.116    7.228    0.000
    x3.x9             0.900    0.125    7.215    0.000
  f23 =~
    x4.x7             1.000
    x5.x8             1.075    0.159    6.771    0.000
    x6.x9             1.108    0.165    6.735    0.000
  f123 =~
    x1.x4.x7          1.000
    x2.x5.x8          1.686    0.343    4.912    0.000
    x3.x6.x9          1.211    0.229    5.292    0.000
  f4 =~
    x10               1.000
    x11               1.031    0.035   29.385    0.000
    x12               0.960    0.033   28.960    0.000

Regressions:
  f4 ~
    f1                0.392    0.059    6.621    0.000
    f2                0.411    0.056    7.376    0.000
    f3                0.403    0.056    7.240    0.000
    f12               0.066    0.069    0.967    0.333
    f13               0.017    0.060    0.279    0.780
    f23               0.198    0.075    2.635    0.008
    f123              0.394    0.090    4.399    0.000

Covariances:
  f1 ~~
    f12               0.000
    f13               0.000
    f123              0.000
  f2 ~~
    f12               0.000
    f23               0.000
    f123              0.000
  f3 ~~
    f13               0.000
    f23               0.000
    f123              0.000
  f12 ~~
    f123              0.000
  f13 ~~
    f123              0.000
  f23 ~~
    f123              0.000
  f1 ~~
    f2                0.112    0.042    2.680    0.007
    f3                0.119    0.042    2.858    0.004
    f23              -0.000    0.047   -0.000    1.000
  f2 ~~
    f3                0.101    0.044    2.281    0.023
    f13               0.000    0.058    0.000    1.000
  f3 ~~
    f12               0.000    0.047    0.000    1.000
  f12 ~~
    f13               0.284    0.072    3.960    0.000
    f23               0.189    0.060    3.133    0.002
  f13 ~~
    f23               0.228    0.074    3.071    0.002

Intercepts:
    x1                0.000
    x4                0.000
    x7                0.000
    x10               0.000
    x1.x4             0.000
    x1.x7             0.000
    x4.x7             0.000
    x1.x4.x7          0.000
    f1                0.000    0.044    0.000    1.000
    f2               -0.000    0.045   -0.000    1.000
    f3               -0.000    0.046   -0.000    1.000
    f12               0.000    0.063    0.000    1.000
    f13              -0.000    0.064   -0.000    1.000
    f23              -0.000    0.066   -0.000    1.000
    f123             -0.000    0.090   -0.000    1.000
    f4                0.026    0.065    0.395    0.693
    x2               -0.000    0.047   -0.000    1.000
    x3               -0.000    0.047   -0.000    1.000
    x5                0.000    0.044    0.000    1.000
    x6                0.000    0.044    0.000    1.000
    x8                0.000    0.044    0.000    1.000
    x9                0.000    0.045    0.000    1.000
    x2.x5            -0.000    0.089   -0.000    1.000
    x3.x6            -0.000    0.086   -0.000    1.000
    x2.x8             0.000    0.071    0.000    1.000
    x3.x9             0.000    0.074    0.000    1.000
    x5.x8             0.000    0.084    0.000    1.000
    x6.x9             0.000    0.085    0.000    1.000
    x2.x5.x8          0.000    0.163    0.000    1.000
    x3.x6.x9          0.000    0.134    0.000    1.000
    x11              -0.001    0.046   -0.017    0.986
    x12               0.001    0.044    0.024    0.981

Variances:
    x1                1.006    0.065
    x2                1.012    0.070
    x3                0.971    0.072
    x4                0.988    0.070
    x5                0.995    0.070
    x6                1.012    0.067
    x7                1.026    0.070
    x8                0.978    0.067
    x9                0.993    0.069
    x1.x4             2.990    0.176
    x2.x5             2.968    0.228
    x3.x6             2.882    0.215
    x1.x7             2.763    0.225
    x2.x8             3.110    0.194
    x3.x9             3.274    0.213
    x4.x7             3.394    0.212
    x5.x8             3.138    0.218
    x6.x9             3.110    0.225
    x1.x4.x7          7.052    0.387
    x2.x5.x8          6.361    0.642
    x3.x6.x9          7.568    0.461
    x10               1.003    0.069
    x11               1.008    0.071
    x12               0.977    0.065
    f1                0.924    0.087
    f2                1.050    0.096
    f3                1.048    0.097
    f12               0.949    0.163
    f13               1.341    0.232
    f23               0.933    0.190
    f123              0.995    0.283
    f4                1.551    0.120

> 
> result3wayRC <- probe3WayRC(fitRC3way, c("f1", "f2", "f3", "f12", "f13", "f23", "f123"), "f4", c("f1", "f2"), c(-1, 0, 1), c(-1, 0, 1))
> result3wayRC
$SimpleIntcept
  f1 f2      Intcept         SE        Wald            p
1 -1 -1 -0.653179183 0.11723255 -5.57165362 2.523327e-08
2  0 -1 -0.367764804 0.08653497 -4.24989808 2.138678e-05
3  1 -1 -0.082350425 0.12836984 -0.64150915 5.211919e-01
4 -1  0 -0.355317033 0.08867749 -4.00684572 6.153503e-05
5  0  0 -0.003585556 0.06611886 -0.05422895 9.567528e-01
6  1  0  0.348145920 0.08867748  3.92597917 8.637763e-05
7 -1  1 -0.057454884 0.12831766 -0.44775509 6.543300e-01
8  0  1  0.360593691 0.08653500  4.16702688 3.085981e-05
9  1  1  0.778642266 0.11760049  6.62108021 3.565837e-11

$SimpleSlope
  f1 f2      Slope         SE       Wald        p
1 -1 -1  0.5385402 0.13210674  4.0765533 0.000046
2  0 -1  0.1609775 0.08701614  1.8499730 0.064317
3  1 -1 -0.2165852 0.14689768 -1.4743946 0.140375
4 -1  0  0.3422144 0.08691822  3.9372000 0.000082
5  0  0  0.3589868 0.05571073  6.4437630 0.000000
6  1  0  0.3757591 0.08712539  4.3128543 0.000016
7 -1  1  0.1458887 0.14691996  0.9929807 0.320719
8  0  1  0.5569960 0.08755685  6.3615356 0.000000
9  1  1  0.9681034 0.13284953  7.2872169 0.000000

> 
> 
> 
> cleanEx()
> nameEx("reliability")
> ### * reliability
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reliability
> ### Title: Calculate reliability values of factors
> ### Aliases: reliability
> 
> ### ** Examples
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939)
> reliability(fit)
          visual   textual     speed
alpha  0.6261171 0.8827069 0.6884550
omega  0.6253180 0.8851755 0.6877602
omega2 0.6253180 0.8851755 0.6877602
omega3 0.6120055 0.8850615 0.6858421
> 
> 
> 
> cleanEx()
> nameEx("reliabilityL2")
> ### * reliabilityL2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reliabilityL2
> ### Title: Calculate the reliability values of a second-order factor
> ### Aliases: reliabilityL2
> 
> ### ** Examples
> 
> HS.model3 <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 
+ 			  higher =~ visual + textual + speed'
> 
> fit6 <- cfa(HS.model3, data=HolzingerSwineford1939)
> reliability(fit6) # Should provide a warning for the endogenous variable
          visual   textual     speed
alpha  0.6261171 0.8827069 0.6884550
omega  0.6253178 0.8851754 0.6877600
omega2 0.6253178 0.8851754 0.6877600
omega3 0.6120051 0.8850612 0.6858419
> reliabilityL2(fit6, "higher")
       omegaL1        omegaL2 partialOmegaL1 
     0.5542949      0.6958905      0.7818424 
> 
> 
> 
> cleanEx()
> nameEx("residualCovariate")
> ### * residualCovariate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residualCovariate
> ### Title: Residual centered all target indicators by covariates
> ### Aliases: residualCovariate
> 
> ### ** Examples
> 
> dat <- residualCovariate(attitude, 2:7, 1)
> 
> 
> 
> cleanEx()
> nameEx("runMI")
> ### * runMI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runMI
> ### Title: Multiply impute and analyze data using lavaan
> ### Aliases: runMI cfa.mi sem.mi growth.mi lavaan.mi
> 
> ### ** Examples
> 
> library(lavaan)
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> HSMiss <- HolzingerSwineford1939[,paste("x", 1:9, sep="")]
> randomMiss <- rbinom(prod(dim(HSMiss)), 1, 0.1)
> randomMiss <- matrix(as.logical(randomMiss), nrow=nrow(HSMiss))
> HSMiss[randomMiss] <- NA
> 
> out <- cfa.mi(HS.model, data=HSMiss, m = 3, chi="all")
Loading required package: Amelia
Loading required package: foreign
## 
## Amelia II: Multiple Imputation
## (Version 1.6.3, built: 2012-06-21)
## Copyright (C) 2005-2013 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> summary(out)
lavaan (0.5-10) converged normally after   3 iterations

  Number of observations                           301

  Estimator                                         ML

Parameter estimates:

  Information                                 Expected
  Standard Errors                                 None

                   Estimate  Std.err  Z-value  P(>|z|)
Latent variables:
  visual =~
    x1                1.000
    x2                0.494    0.100    4.915    0.000
    x3                0.669    0.110    6.051    0.000
  textual =~
    x4                1.000
    x5                1.146    0.074   15.396    0.000
    x6                0.966    0.064   15.182    0.000
  speed =~
    x7                1.000
    x8                1.124    0.156    7.184    0.000
    x9                1.122    0.228    4.925    0.000

Covariances:
  visual ~~
    textual           0.421    0.078    5.400    0.000
    speed             0.259    0.057    4.573    0.000
  textual ~~
    speed             0.176    0.051    3.461    0.001

Variances:
    x1                0.493    0.126
    x2                1.122    0.113
    x3                0.900    0.103
    x4                0.412    0.050
    x5                0.496    0.081
    x6                0.327    0.049
    x7                0.831    0.087
    x8                0.519    0.102
    x9                0.469    0.095
    visual            0.821    0.160
    textual           0.956    0.114
    speed             0.397    0.107

> inspect(out, "fit")
            chisq                df            pvalue    baseline.chisq 
           54.107            24.000             0.000           639.485 
      baseline.df   baseline.pvalue               cfi               tli 
           36.000             0.000             0.950             0.925 
             logl unrestricted.logl              npar               aic 
        -4295.177         -3691.630            21.000          8632.355 
              bic            ntotal              bic2             rmsea 
         8710.204           301.000          8643.604             0.065 
   rmsea.ci.lower    rmsea.ci.upper      rmsea.pvalue              srmr 
            0.042             0.088             0.137             0.063 
      srmr_nomean 
            0.063 
> inspect(out, "impute")
$convergenceRate
target model   null model 
           1            1 

$fractionMissing
       lhs op     rhs group       fmi1       fmi2
1   visual =~      x1     1        NaN 0.00000000
2   visual =~      x2     1 0.05748372 0.06058278
3   visual =~      x3     1 0.03887513 0.04032436
4  textual =~      x4     1        NaN 0.00000000
5  textual =~      x5     1 0.12746500 0.14130408
6  textual =~      x6     1 0.16527077 0.18717352
7    speed =~      x7     1        NaN 0.00000000
8    speed =~      x8     1 0.03343008 0.03450848
9    speed =~      x9     1 0.53203873 0.62502185
10      x1 ~~      x1     1 0.08262903 0.08882894
11      x2 ~~      x2     1 0.23702604 0.27655938
12      x3 ~~      x3     1 0.20753441 0.23959503
13      x4 ~~      x4     1 0.02018464 0.02058359
14      x5 ~~      x5     1 0.40149062 0.47918201
15      x6 ~~      x6     1 0.22987263 0.26757860
16      x7 ~~      x7     1 0.08731125 0.09419024
17      x8 ~~      x8     1 0.51802960 0.61024782
18      x9 ~~      x9     1 0.48674986 0.57646734
19  visual ~~  visual     1 0.11139257 0.12221721
20 textual ~~ textual     1 0.02762112 0.02836212
21   speed ~~   speed     1 0.32055922 0.38105300
22  visual ~~ textual     1 0.11941246 0.13170611
23  visual ~~   speed     1 0.01406309 0.01425803
24 textual ~~   speed     1 0.05514437 0.05800453

$targetFit
$targetFit$lmrr
         F        df1        df2        p.F 
 1.5894565 24.0000000  0.6310259  0.6340669 

$targetFit$mr
       F df1      df2      pvalue
 2.25444  24 223.5226 0.001127729

$targetFit$mplus
    chisq df       pvalue
 54.10655 24 0.0004125164


$nullFit
$nullFit$lmrr
          F         df1         df2         p.F 
29.60308013 24.00000000  1.87481293  0.03955364 

$nullFit$mr
        F df1     df2 pvalue
 17.76346  36 428.458      0

$nullFit$mplus
    chisq df pvalue
 639.4845 36      0


> 
> ## Not run: 
> ##D ##Multiple group example
> ##D HSMiss2 <- cbind(HSMiss, school = HolzingerSwineford1939[,"school"])
> ##D out2 <- cfa.mi(HS.model, data=HSMiss2, m = 3, miArgs=list(noms="school"), chi="MR", group="school")
> ##D summary(out2)
> ##D inspect(out2, "fit")
> ##D inspect(out2, "impute")
> ##D 
> ##D ##Example using previously imputed data with runMI
> ##D library(Amelia)
> ##D 
> ##D modsim <- '
> ##D f1 =~ 0.7*y1+0.7*y2+0.7*y3
> ##D f2 =~ 0.7*y4+0.7*y5+0.7*y6
> ##D f3 =~ 0.7*y7+0.7*y8+0.7*y9'
> ##D 
> ##D mod <- '
> ##D f1 =~ y1+y2+y3
> ##D f2 =~ y4+y5+y6
> ##D f3 =~ y7+y8+y9'
> ##D 
> ##D datsim <- simulateData(modsim,model.type="cfa", meanstructure=TRUE, 
> ##D 	std.lv=TRUE, sample.nobs=c(200,200))
> ##D randomMiss2 <- rbinom(prod(dim(datsim)), 1, 0.1)
> ##D randomMiss2 <- matrix(as.logical(randomMiss2), nrow=nrow(datsim))
> ##D datsim[randomMiss2] <- NA
> ##D datsimMI <- amelia(datsim,m=3, noms="group")
> ##D 
> ##D out3 <- runMI(mod, data=datsimMI$imputations, chi="LMRR", group="group", fun="cfa")
> ##D summary(out3)
> ##D inspect(out3, "fit")
> ##D inspect(out3, "impute")
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching 'package:Amelia', 'package:foreign'

> nameEx("saturateMx")
> ### * saturateMx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saturateMx
> ### Title: Analyzing data using a saturate model
> ### Aliases: saturateMx
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(OpenMx)
> ##D data(demoOneFactor)
> ##D satModel <- saturateMx(demoOneFactor)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("simParcel")
> ### * simParcel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParcel
> ### Title: Simulated Data set to Demonstrate Random Allocations of Parcels
> ### Aliases: simParcel
> 
> ### ** Examples
> 
> head(simParcel)
     f1item1      f1item2     f1item3    f1item4    f1item5    f1item6
1 -1.7896958 -1.951487976  0.06921463 -1.4553012 -0.8801326 -0.6760663
2  0.5245525 -0.009665777  2.02336708 -0.5052323  1.2978291  0.4663007
3 -0.5121904  0.101476908 -0.41061133  0.1037776  1.0748526  0.7012178
4 -0.7769473 -0.547552458 -1.01396947  0.4581587 -0.6279040 -0.3917189
5  1.1383346  0.444802803  0.38796807 -0.9788030 -0.2293250  0.4426714
6 -0.6525078  0.080539695 -2.00157281 -0.3997432 -1.2986350 -1.4376393
      f1item7    f1item8    f1item9    f2item1    f2item2    f2item3
1  0.07133309 -1.6728790 -0.7473949 -0.4374817 -0.1431815 -1.0342390
2  2.74670484  1.3816698  1.8065698  0.1358011  0.8965890  1.6516467
3  1.31352970  0.2770826  1.1031422  0.9553923  1.0204971  0.1568082
4  0.96030051  0.2503113 -0.8986681  0.5973238  1.4027800  0.9871376
5  0.28534016  0.3281577  0.1932261 -0.7980739 -1.6738395 -0.5503140
6 -0.97896255 -1.0324955 -1.2430591 -0.4373219 -0.8818279  1.2320996
      f2item4     f2item5    f2item6    f2item7    f2item8    f2item9
1 -1.44552176  0.09842477 -1.1666086 -1.5057074 -3.3265526 -1.4957729
2  1.65291809 -0.12436952 -0.5910034  1.7282434  2.2468441  2.2650310
3  0.70208355  0.36394797  0.2040989  1.8288085  0.1438386  0.2629538
4  0.00197898 -0.27991938  1.6400470  0.6514612  0.7272645  2.5138630
5  0.76802013 -0.93197593 -0.7515958  0.7287445 -0.2093306 -0.1923059
6 -1.32456576  0.52782351  2.1100907 -1.0557662  0.5176468 -0.1303705
> 
> 
> 
> cleanEx()
> nameEx("skew")
> ### * skew
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skew
> ### Title: Finding skewness
> ### Aliases: skew
> 
> ### ** Examples
> 
> skew(1:5)
skew (g1)        se         z         p 
 0.000000  1.095445  0.000000  1.000000 
> 
> 
> 
> cleanEx()
> nameEx("splitSample")
> ### * splitSample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: splitSample
> ### Title: Randomly Split a Data Set into Halves
> ### Aliases: splitSample
> 
> ### ** Examples
> 
> #### Input is .dat file
> #splitSample("C:/Users/Default/Desktop/MYDATA.dat")
> #### Output saved to "C:/Users/Default/Desktop/" in .dat format
> #### Names are "MYDATA_s1.dat" and "MYDATA_s2.dat"
> 
> #### Input is R object
> ##Split C02 dataset from the datasets package
> library(datasets)
> splitMyData <- splitSample(CO2, path="object")
> summary(splitMyData[[1]])
     Plant             Type         Treatment    conc       uptake  
 Qc1    : 6   Mississippi:23   chilled   :23     95:6   18.9   : 2  
 Mn2    : 5   Quebec     :19   nonchilled:19    175:3   32.4   : 2  
 Mc1    : 4                                     250:6    7.7   : 1  
 Mc2    : 4                                     350:7   10.5   : 1  
 Mc3    : 4                                     500:8   10.6   : 1  
 Mn3    : 4                                     675:7   11.3   : 1  
 (Other):15                                    1000:5   (Other):34  
> summary(splitMyData[[2]])
     Plant             Type         Treatment    conc       uptake  
 Qn3    : 6   Mississippi:19   chilled   :19     95:6   17.9   : 2  
 Mn1    : 5   Quebec     :23   nonchilled:23    175:9   41.4   : 2  
 Qc3    : 5                                     250:6    9.3   : 1  
 Qc2    : 4                                     350:5   10.6   : 1  
 Qn1    : 4                                     500:4   11.4   : 1  
 Mc1    : 3                                     675:5   12.0   : 1  
 (Other):15                                    1000:7   (Other):34  
> #### Output object splitMyData becomes list of output data sets
> 
> #### Input is .dat file in "C:/" folder
> #splitSample("C:/testdata.dat", path = "C:/Users/Default/Desktop/", type = "csv")
> #### Output saved to "C:/Users/Default/Desktop/" in .csv format
> #### Names are "testdata_s1.csv" and "testdata_s2.csv"
> 
> #### Input is R object
> #splitSample(myData, path = "C:/Users/Default/Desktop/", name = "splitdata")
> #### Output saved to "C:/Users/Default/Desktop/" in .dat format
> #### Names are "splitdata_s1.dat" and "splitdata_s2.dat"
> 
> 
> 
> cleanEx()
> nameEx("standardizeMx")
> ### * standardizeMx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: standardizeMx
> ### Title: Find standardized estimates for OpenMx output
> ### Aliases: standardizeMx
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(OpenMx)
> ##D data(myFADataRaw)
> ##D myFADataRaw <- myFADataRaw[,c("x1","x2","x3","x4","x5","x6")]
> ##D oneFactorModel <- mxModel("Common Factor Model Path Specification", 
> ##D 	type="RAM",
> ##D 	mxData(
> ##D 		observed=myFADataRaw, 
> ##D 		type="raw"
> ##D 	),
> ##D 	manifestVars=c("x1","x2","x3","x4","x5","x6"),
> ##D 	latentVars="F1",
> ##D 	mxPath(from=c("x1","x2","x3","x4","x5","x6"),
> ##D 		arrows=2,
> ##D 		free=TRUE,
> ##D 		values=c(1,1,1,1,1,1),
> ##D 		labels=c("e1","e2","e3","e4","e5","e6")
> ##D 	), 
> ##D 	# residual variances
> ##D 	# -------------------------------------
> ##D 	mxPath(from="F1",
> ##D 		arrows=2,
> ##D 		free=TRUE,
> ##D 		values=1,
> ##D 		labels ="varF1"
> ##D 	), 
> ##D 	# latent variance
> ##D 	# -------------------------------------
> ##D 	mxPath(from="F1",
> ##D 		to=c("x1","x2","x3","x4","x5","x6"),
> ##D 		arrows=1,
> ##D 		free=c(FALSE,TRUE,TRUE,TRUE,TRUE,TRUE),
> ##D 		values=c(1,1,1,1,1,1),
> ##D 		labels =c("l1","l2","l3","l4","l5","l6")
> ##D 	), 
> ##D 	# factor loadings
> ##D 	# -------------------------------------
> ##D 	mxPath(from="one",
> ##D 		to=c("x1","x2","x3","x4","x5","x6","F1"),
> ##D 		arrows=1,
> ##D 		free=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE),
> ##D 		values=c(1,1,1,1,1,1,0),
> ##D 		labels =c("meanx1","meanx2","meanx3","meanx4","meanx5","meanx6",NA)
> ##D 	) 
> ##D 	# means
> ##D 	# -------------------------------------
> ##D ) # close model
> ##D # Create an MxModel object
> ##D # -----------------------------------------------------------------------------
> ##D oneFactorFit <- mxRun(oneFactorModel)      
> ##D standardizeMx(oneFactorFit)
> ##D 
> ##D # Compare with lavaan
> ##D library(lavaan)
> ##D script <- "f1 =~ x1 + x2 + x3 + x4 + x5 + x6"
> ##D fit <- cfa(script, data=myFADataRaw, meanstructure=TRUE)
> ##D standardize(fit)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("tukeySEM")
> ### * tukeySEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tukeySEM
> ### Title: Tukey's WSD post-hoc test of means for unequal variance and
> ###   sample size
> ### Aliases: tukeySEM
> 
> ### ** Examples
> 
> ##For a case where three groups have been compared:
> ##Group 1: mean = 3.91, var = 0.46, n = 246
> ##Group 2: mean = 3.96, var = 0.62, n = 465
> ##Group 3: mean = 2.94, var = 1.07, n = 64
> 
> #compare group 1 and group 2
> tukeySEM(3.91, 3.96, 0.46, 0.62, 246, 425, 3)
          q          df           p 
  1.2255892 574.0328450   0.6615848 
> 
> #compare group 1 and group 3
> tukeySEM(3.91, 2.94, 0.46, 1.07, 246, 64, 3)
           q           df            p 
1.006150e+01 7.640258e+01 1.474966e-09 
> 
> #compare group 2 and group 3
> tukeySEM(3.96, 2.94, 0.62, 1.07, 465, 64, 3)
           q           df            p 
1.073622e+01 7.222205e+01 1.743093e-10 
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  16.97 0.18 17.24 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
