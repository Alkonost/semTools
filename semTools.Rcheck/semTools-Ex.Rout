
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "semTools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('semTools')
Loading required package: MASS
Loading required package: lavaan
This is lavaan 0.4-14
lavaan is BETA software! Please report any bugs.
 
###############################################################################
This is semTools 0.1-5
All users of R (or SEM) are invited to submit functions or ideas for functions.
###############################################################################

Attaching package: 'semTools'

The following object(s) are masked from 'package:lavaan':

    measurementInvariance

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("exLong")
> ### * exLong
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: exLong
> ### Title: Simulated Data set to Demonstrate Longitudinal Measurement
> ###   Invariance
> ### Aliases: exLong
> 
> ### ** Examples
> 
> head(exLong)
     sex       y1t1       y2t1        y3t1       y1t2        y2t2      y3t2
1 female  2.7625423  2.2812510  2.49656014  2.9499400  1.12338865 2.1505466
2 female  0.2707267 -0.7830365 -0.23554656  0.4631038  0.37536412 2.0283960
3 female -0.2604141  0.3146881  1.21590069  0.3528803  0.00986991 1.0709696
4 female -1.0227953 -1.3454733  0.04899156  1.9530137 -1.03357363 2.7817132
5 female  0.7385408 -0.6027341  0.42557808 -0.2027779 -0.34937717 1.1865013
6 female  0.5864878 -0.4659974  0.10691644  0.7869085 -0.31982170 0.4825864
       y1t3       y2t3       y3t3
1  1.912824  1.9625734  2.4403812
2  2.112440  0.4326280  2.6352259
3  1.472736  1.1951005  1.4287358
4  1.249376 -0.5369589  2.3371304
5  1.425101  1.8539630  2.0861627
6 -1.201912 -2.0090700 -0.8366951
> 
> 
> 
> cleanEx()
> nameEx("kurtosis")
> ### * kurtosis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kurtosis
> ### Title: Finding excessive kurtosis
> ### Aliases: kurtosis
> 
> ### ** Examples
> 
> kurtosis(1:5)
Excess Kur (g2)              se               z               p 
     -1.2000000       2.1908902      -0.5477226       0.5838824 
> 
> 
> 
> cleanEx()
> nameEx("longInvariance")
> ### * longInvariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: longInvariance
> ### Title: Measurement Invariance Tests Within Person
> ### Aliases: longInvariance longInvariance
> 
> ### ** Examples
> 
> model <- ' f1t1 =~ y1t1 + y2t1 + y3t1
+               f1t2 =~ y1t2 + y2t2 + y3t2
+ 			  f1t3 =~ y1t3 + y2t3 + y3t3'
> 
> # Create list of variables
> var1 <- c("y1t1", "y2t1", "y3t1")
> var2 <- c("y1t2", "y2t2", "y3t2")
> var3 <- c("y1t3", "y2t3", "y3t3")
> constrainedVar <- list(var1, var2, var3)
> 
> # Invariance of the same factor across timepoints
> longInvariance(model, auto=1, constrainAuto=TRUE, varList=constrainedVar, data=exLong)

#################### Measurement invariance tests ####################

The order of autocorrelation:  1 

#################### Model 1: configural invariance:
   chisq       df   pvalue      cfi    rmsea      bic 
  21.806   21.000    0.411    0.999    0.014 4542.613 

#################### Model 2: weak invariance (equal loadings):
   chisq       df   pvalue      cfi    rmsea      bic 
  27.038   25.000    0.354    0.998    0.020 4526.652 

[Model 1 versus model 2]
  delta.chisq      delta.df delta.p.value     delta.cfi 
        5.232         4.000         0.264         0.001 

#################### Model 3: strong invariance (equal loadings + intercepts):
   chisq       df   pvalue      cfi    rmsea      bic 
  44.500   29.000    0.033    0.986    0.052 4522.921 

[Model 1 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       22.695         8.000         0.004         0.013 

[Model 2 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       17.462         4.000         0.002         0.012 

#################### Model 4: equal loadings + intercepts + means:
   chisq       df   pvalue      cfi    rmsea      bic 
 150.143   31.000    0.000    0.891    0.139 4617.967 

[Model 1 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
      128.337        10.000         0.000         0.109 

[Model 2 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
      123.105         6.000         0.000         0.107 

[Model 3 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
      105.643         2.000         0.000         0.095 
> 
> # Invariance of the same factor across timepoints and groups
> longInvariance(model, auto=1, constrainAuto=TRUE, varList=constrainedVar, data=exLong, group="sex", group.equal=c("loadings", "intercepts"))

#################### Measurement invariance tests ####################

The order of autocorrelation:  1 

#################### Model 1: configural invariance:
   chisq       df   pvalue      cfi    rmsea      bic 
  43.993   54.000    0.833    1.000    0.000 4631.688 

#################### Model 2: weak invariance (equal loadings):
   chisq       df   pvalue      cfi    rmsea      bic 
  49.247   58.000    0.787    1.000    0.000 4615.748 

[Model 1 versus model 2]
  delta.chisq      delta.df delta.p.value     delta.cfi 
        5.254         4.000         0.262         0.000 

#################### Model 3: strong invariance (equal loadings + intercepts):
   chisq       df   pvalue      cfi    rmsea      bic 
  66.896   62.000    0.313    0.995    0.028 4612.204 

[Model 1 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       22.903         8.000         0.003         0.005 

[Model 2 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       17.649         4.000         0.001         0.005 

#################### Model 4: equal loadings + intercepts + means:
   chisq       df   pvalue      cfi    rmsea      bic 
 142.192   66.000    0.000    0.930    0.107 4666.306 

[Model 1 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       98.198        12.000         0.000         0.070 

[Model 2 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       92.944         8.000         0.000         0.070 

[Model 3 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       75.296         4.000         0.000         0.066 
> 
> 
> 
> cleanEx()
> nameEx("measurementInvariance")
> ### * measurementInvariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: measurementInvariance
> ### Title: Measurement Invariance Tests
> ### Aliases: measurementInvariance measurementinvariance
> 
> ### ** Examples
> 
> HW.model <- ' visual =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed =~ x7 + x8 + x9 '
> 
> measurementInvariance(HW.model, data=HolzingerSwineford1939, group="school")

Measurement invariance tests:

Model 1: configural invariance:
   chisq       df   pvalue      cfi    rmsea      bic 
 115.851   48.000    0.000    0.923    0.097 7706.822 

Model 2: weak invariance (equal loadings):
   chisq       df   pvalue      cfi    rmsea      bic 
 124.044   54.000    0.000    0.921    0.093 7680.771 

[Model 1 versus model 2]
  delta.chisq      delta.df delta.p.value     delta.cfi 
        8.192         6.000         0.224         0.002 

Model 3: strong invariance (equal loadings + intercepts):
   chisq       df   pvalue      cfi    rmsea      bic 
 164.103   60.000    0.000    0.882    0.107 7686.588 

[Model 1 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       48.251        12.000         0.000         0.041 

[Model 2 versus model 3]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       40.059         6.000         0.000         0.038 

Model 4: equal loadings + intercepts + means:
   chisq       df   pvalue      cfi    rmsea      bic 
 204.605   63.000    0.000    0.840    0.122 7709.969 

[Model 1 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       88.754        15.000         0.000         0.083 

[Model 3 versus model 4]
  delta.chisq      delta.df delta.p.value     delta.cfi 
       40.502         3.000         0.000         0.042 
> 
> 
> 
> cleanEx()
> nameEx("miPowerFit")
> ### * miPowerFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: miPowerFit
> ### Title: Modification indices and their power approach for model fit
> ###   evaluation
> ### Aliases: miPowerFit miPowerFit
> 
> ### ** Examples
> 
> library(lavaan)
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939, group="sex", meanstructure=TRUE)
> miPowerFit(fit)
        lhs op rhs group            mi         epc target.epc     std.epc
4    visual =~  x4     1  0.6363651929  0.08975851    0.55002  0.06527707
5    visual =~  x5     1  8.1846902298 -0.35989771    0.62097 -0.23182881
6    visual =~  x6     1  5.0193118358  0.24236589    0.52248  0.18555154
7    visual =~  x7     1 10.5807135365 -0.40027951    0.49734 -0.32193380
8    visual =~  x8     1  0.0310316127  0.02904995    0.54861  0.02118058
9    visual =~  x9     1 16.8815217816  0.46121535    0.44370  0.41579338
10  textual =~  x1     1  4.9557453408  0.42348422    0.48047  0.35256012
11  textual =~  x2     1  0.0000402809  0.00089994    0.54147  0.00066481
12  textual =~  x3     1  4.9948038007 -0.37207769    0.50582 -0.29423992
16  textual =~  x7     1  3.1602169688 -0.15037285    0.43316 -0.13885966
17  textual =~  x8     1  0.3928700712  0.06951374    0.47782  0.05819244
18  textual =~  x9     1  2.2026779714  0.11822085    0.38644  0.12236898
19    speed =~  x1     1  0.3217033205  0.11950081    0.68938  0.06933831
20    speed =~  x2     1  0.2311807692 -0.09208720    0.77691 -0.04741216
21    speed =~  x3     1  0.0944508518 -0.05851503    0.72575 -0.03225090
22    speed =~  x4     1  0.2595590819 -0.05545314    0.68733 -0.03227164
23    speed =~  x5     1  0.0097119875 -0.01194366    0.77600 -0.00615653
24    speed =~  x6     1  0.4028919820  0.06665168    0.65292  0.04083326
29       x1 ~~  x2     1  6.1072176996 -0.34410133    0.13987 -0.24601871
30       x1 ~~  x3     1  0.0654834197 -0.07637322    0.13066 -0.05845301
31       x1 ~~  x4     1  0.1096188436  0.01949500    0.12374  0.01575468
32       x1 ~~  x5     1  0.5271293102 -0.04746402    0.13970 -0.03397458
33       x1 ~~  x6     1  2.1293565996  0.08299778    0.11755  0.07060911
34       x1 ~~  x7     1  6.6472078927 -0.17487814    0.11189 -0.15629316
35       x1 ~~  x8     1  2.5198193898  0.12360758    0.12343  0.10014719
36       x1 ~~  x9     1  1.7976059677  0.08685096    0.09982  0.08700609
38       x2 ~~  x3     1  7.7668481475  0.35304448    0.14725  0.23976358
39       x2 ~~  x4     1  1.6215073446 -0.09214559    0.13945 -0.06607677
40       x2 ~~  x5     1  0.0040735490 -0.00509066    0.15744 -0.00323334
41       x2 ~~  x6     1  2.0081568085  0.09948557    0.13247  0.07510043
42       x2 ~~  x7     1  2.6587735625 -0.13572522    0.12610 -0.10763488
43       x2 ~~  x8     1  0.0065903179  0.00711848    0.13910  0.00511763
44       x2 ~~  x9     1  1.9090281742  0.11173841    0.11250  0.09932660
46       x3 ~~  x4     1  2.1941046092  0.09335041    0.13027  0.07165961
47       x3 ~~  x5     1  7.4224940550 -0.19011195    0.14707 -0.12926203
48       x3 ~~  x6     1  0.0283154777  0.01026169    0.12375  0.00829249
49       x3 ~~  x7     1  0.5742373477  0.05468966    0.11779  0.04642818
50       x3 ~~  x8     1  4.2234622323 -0.16281335    0.12994 -0.12530133
51       x3 ~~  x9     1  6.3906616527  0.17603979    0.10509  0.16751662
53       x4 ~~  x5     1  4.9210526246  0.40931674    0.13929  0.29386073
54       x4 ~~  x6     1  7.6056442352 -0.38131874    0.11720 -0.32536808
55       x4 ~~  x7     1  0.9916474583  0.04930642    0.11156  0.04419778
56       x4 ~~  x8     1  2.1610996059 -0.07683682    0.12306 -0.06243895
57       x4 ~~  x9     1  0.1232680989  0.01689664    0.09953  0.01697727
59       x5 ~~  x6     1  0.5068299017  0.11823268    0.13232  0.08935681
60       x5 ~~  x7     1  0.2983302555 -0.02979480    0.12595 -0.02365597
61       x5 ~~  x8     1  0.9566993134  0.05651261    0.13893  0.04067568
62       x5 ~~  x9     1  0.0797928421 -0.01497183    0.11236 -0.01332434
64       x6 ~~  x7     1  1.0862703029 -0.05008005    0.10597 -0.04725739
65       x6 ~~  x8     1  0.7472114388  0.04376563    0.11690  0.03743928
66       x6 ~~  x9     1  0.0000001939 -0.00002057    0.09454 -0.00002176
68       x7 ~~  x8     1 15.8009630225  1.48246020    0.11127  1.33225526
69       x7 ~~  x9     1  0.0714106474  0.03086671    0.08999  0.03429858
71       x8 ~~  x9     1 10.6072850037 -0.61451140    0.09927 -0.61902038
94   visual =~  x4     2  2.2437764115  0.12994174    0.48278  0.10766089
95   visual =~  x5     2  1.1745723858 -0.10524270    0.53243 -0.07906658
96   visual =~  x6     2  0.2222244499 -0.03909897    0.45681 -0.03423650
97   visual =~  x7     2  2.5184353916 -0.23620561    0.46431 -0.20348837
98   visual =~  x8     2  4.7177237434 -0.29543316    0.36754 -0.32152600
99   visual =~  x9     2 13.0676376868  0.79336171    0.44525  0.71272638
100 textual =~  x1     2  2.1238863096  0.22593106    0.46306  0.19516315
101 textual =~  x2     2  0.0003231965  0.00190155    0.41416  0.00183654
102 textual =~  x3     2  2.8301878638 -0.17472027    0.40273 -0.17353510
106 textual =~  x7     2  1.6152278712  0.12395986    0.44101  0.11243344
107 textual =~  x8     2  1.9397236126 -0.10719061    0.34909 -0.12282269
108 textual =~  x9     2  0.1806473812  0.04738402    0.42291  0.04481760
109   speed =~  x1     2  0.1318580727 -0.14575352    0.89522 -0.06512522
110   speed =~  x2     2  1.7437830085 -0.34387157    0.80068 -0.17178935
111   speed =~  x3     2  2.6959618701  0.42399996    0.77859  0.21783020
112   speed =~  x4     2  0.0196634527 -0.01966363    0.88650 -0.00887250
113   speed =~  x5     2  0.0667162827  0.04069207    0.97766  0.01664884
114   speed =~  x6     2  0.0121729568 -0.01483215    0.83881 -0.00707296
119      x1 ~~  x2     2  0.0155783388  0.01556890    0.12982  0.01199256
120      x1 ~~  x3     2  1.1184468487 -0.14245058    0.12624 -0.11284193
121      x1 ~~  x4     2  5.3210698010  0.12729607    0.14374  0.08856285
122      x1 ~~  x5     2  0.3174510962 -0.03515025    0.15852 -0.02217464
123      x1 ~~  x6     2  1.3353215728 -0.06142984    0.13600 -0.04516798
124      x1 ~~  x7     2  0.5888919598 -0.06240714    0.13824 -0.04514513
125      x1 ~~  x8     2  3.6643065833 -0.12072409    0.10942 -0.11032604
126      x1 ~~  x9     2  2.8653460190  0.13798132    0.13256  0.10408764
128      x2 ~~  x3     2  0.9935396006  0.08013062    0.11291  0.07096997
129      x2 ~~  x4     2  0.5817656443  0.04227567    0.12856  0.03288493
130      x2 ~~  x5     2  0.0566768756 -0.01500972    0.14178 -0.01058694
131      x2 ~~  x6     2  0.2338060099 -0.02594120    0.12164 -0.02132608
132      x2 ~~  x7     2  5.2742796669 -0.18724566    0.12364 -0.15144616
133      x2 ~~  x8     2  0.0818786898 -0.01708367    0.09787 -0.01745562
134      x2 ~~  x9     2  0.0567591048  0.01655187    0.11856  0.01396033
136      x3 ~~  x4     2  1.9413002231 -0.07368868    0.12501 -0.05894670
137      x3 ~~  x5     2  1.6425036450 -0.07706690    0.13786 -0.05590083
138      x3 ~~  x6     2  2.3220076430  0.07797957    0.11828  0.06592563
139      x3 ~~  x7     2  0.1142725457 -0.02628818    0.12023 -0.02186549
140      x3 ~~  x8     2  1.7933069418  0.07645565    0.09517  0.08033704
141      x3 ~~  x9     2  0.4642190294  0.04570650    0.11529  0.03964414
143      x4 ~~  x5     2  0.1838425898 -0.06028887    0.15697 -0.03840766
144      x4 ~~  x6     2  0.7799571841 -0.10845376    0.13468 -0.08052826
145      x4 ~~  x7     2  4.1065940661  0.12116737    0.13689  0.08851458
146      x4 ~~  x8     2  0.3030845985 -0.02395238    0.10836 -0.02210473
147      x4 ~~  x9     2  2.5341691841 -0.07906274    0.13127 -0.06022866
149      x5 ~~  x6     2  1.5981826315  0.16016297    0.14853  0.10783444
150      x5 ~~  x7     2  1.2466141512 -0.07602868    0.15097 -0.05036145
151      x5 ~~  x8     2  0.0198339000 -0.00697324    0.11950 -0.00583530
152      x5 ~~  x9     2  2.4284440849  0.08779718    0.14477  0.06064619
154      x6 ~~  x7     2  0.1524468058  0.02261785    0.12953  0.01746204
155      x6 ~~  x8     2  0.0134536636  0.00488648    0.10253  0.00476592
156      x6 ~~  x9     2  0.0183321346 -0.00649482    0.12421 -0.00522893
158      x7 ~~  x8     2 11.8167173108  0.26834571    0.10421  0.25749648
159      x7 ~~  x9     2  5.2529481588 -0.27165755    0.12625 -0.21517568
161      x8 ~~  x9     2  1.4510469569 -0.17961374    0.09994 -0.17972911
    std.target.epc significant.mi high.power decision
4              0.4          FALSE       TRUE       NM
5              0.4           TRUE       TRUE   EPC:NM
6              0.4           TRUE       TRUE   EPC:NM
7              0.4           TRUE       TRUE   EPC:NM
8              0.4          FALSE       TRUE       NM
9              0.4           TRUE       TRUE    EPC:M
10             0.4           TRUE      FALSE        M
11             0.4          FALSE       TRUE       NM
12             0.4           TRUE       TRUE   EPC:NM
16             0.4          FALSE       TRUE       NM
17             0.4          FALSE       TRUE       NM
18             0.4          FALSE       TRUE       NM
19             0.4          FALSE       TRUE       NM
20             0.4          FALSE       TRUE       NM
21             0.4          FALSE       TRUE       NM
22             0.4          FALSE       TRUE       NM
23             0.4          FALSE       TRUE       NM
24             0.4          FALSE       TRUE       NM
29             0.1           TRUE      FALSE        M
30             0.1          FALSE      FALSE        I
31             0.1          FALSE      FALSE        I
32             0.1          FALSE      FALSE        I
33             0.1          FALSE      FALSE        I
34             0.1           TRUE      FALSE        M
35             0.1          FALSE      FALSE        I
36             0.1          FALSE      FALSE        I
38             0.1           TRUE      FALSE        M
39             0.1          FALSE      FALSE        I
40             0.1          FALSE      FALSE        I
41             0.1          FALSE      FALSE        I
42             0.1          FALSE      FALSE        I
43             0.1          FALSE      FALSE        I
44             0.1          FALSE      FALSE        I
46             0.1          FALSE      FALSE        I
47             0.1           TRUE      FALSE        M
48             0.1          FALSE      FALSE        I
49             0.1          FALSE      FALSE        I
50             0.1           TRUE      FALSE        M
51             0.1           TRUE      FALSE        M
53             0.1           TRUE      FALSE        M
54             0.1           TRUE      FALSE        M
55             0.1          FALSE      FALSE        I
56             0.1          FALSE      FALSE        I
57             0.1          FALSE      FALSE        I
59             0.1          FALSE      FALSE        I
60             0.1          FALSE      FALSE        I
61             0.1          FALSE      FALSE        I
62             0.1          FALSE      FALSE        I
64             0.1          FALSE      FALSE        I
65             0.1          FALSE      FALSE        I
66             0.1          FALSE      FALSE        I
68             0.1           TRUE      FALSE        M
69             0.1          FALSE      FALSE        I
71             0.1           TRUE      FALSE        M
94             0.4          FALSE       TRUE       NM
95             0.4          FALSE       TRUE       NM
96             0.4          FALSE       TRUE       NM
97             0.4          FALSE       TRUE       NM
98             0.4           TRUE      FALSE        M
99             0.4           TRUE      FALSE        M
100            0.4          FALSE       TRUE       NM
101            0.4          FALSE       TRUE       NM
102            0.4          FALSE       TRUE       NM
106            0.4          FALSE       TRUE       NM
107            0.4          FALSE       TRUE       NM
108            0.4          FALSE       TRUE       NM
109            0.4          FALSE      FALSE        I
110            0.4          FALSE       TRUE       NM
111            0.4          FALSE       TRUE       NM
112            0.4          FALSE       TRUE       NM
113            0.4          FALSE       TRUE       NM
114            0.4          FALSE       TRUE       NM
119            0.1          FALSE      FALSE        I
120            0.1          FALSE      FALSE        I
121            0.1           TRUE      FALSE        M
122            0.1          FALSE      FALSE        I
123            0.1          FALSE      FALSE        I
124            0.1          FALSE      FALSE        I
125            0.1          FALSE      FALSE        I
126            0.1          FALSE      FALSE        I
128            0.1          FALSE      FALSE        I
129            0.1          FALSE      FALSE        I
130            0.1          FALSE      FALSE        I
131            0.1          FALSE      FALSE        I
132            0.1           TRUE      FALSE        M
133            0.1          FALSE      FALSE        I
134            0.1          FALSE      FALSE        I
136            0.1          FALSE      FALSE        I
137            0.1          FALSE      FALSE        I
138            0.1          FALSE      FALSE        I
139            0.1          FALSE      FALSE        I
140            0.1          FALSE      FALSE        I
141            0.1          FALSE      FALSE        I
143            0.1          FALSE      FALSE        I
144            0.1          FALSE      FALSE        I
145            0.1           TRUE      FALSE        M
146            0.1          FALSE      FALSE        I
147            0.1          FALSE      FALSE        I
149            0.1          FALSE      FALSE        I
150            0.1          FALSE      FALSE        I
151            0.1          FALSE      FALSE        I
152            0.1          FALSE      FALSE        I
154            0.1          FALSE      FALSE        I
155            0.1          FALSE      FALSE        I
156            0.1          FALSE      FALSE        I
158            0.1           TRUE      FALSE        M
159            0.1           TRUE      FALSE        M
161            0.1          FALSE      FALSE        I
> 
> model <- ' 
+   # latent variable definitions
+      ind60 =~ x1 + x2 + x3
+      dem60 =~ y1 + a*y2 + b*y3 + c*y4
+      dem65 =~ y5 + a*y6 + b*y7 + c*y8
+ 
+   # regressions
+     dem60 ~ ind60
+     dem65 ~ ind60 + dem60
+ 
+   # residual correlations
+     y1 ~~ y5
+     y2 ~~ y4 + y6
+     y3 ~~ y7
+     y4 ~~ y8
+     y6 ~~ y8
+ '
> fit2 <- sem(model, data=PoliticalDemocracy, meanstructure=TRUE)
> miPowerFit(fit2, stdLoad=0.3, cor=0.2, stdBeta=0.2, intcept=0.5)
     lhs op rhs group        mi       epc target.epc   std.epc std.target.epc
4  ind60 =~  y1     1 1.2752429 -0.337962    1.15949 -0.087443            0.3
5  ind60 =~  y2     1 0.5986317 -0.334336    1.70286 -0.058901            0.3
6  ind60 =~  y3     1 0.1698745 -0.177638    1.52826 -0.034871            0.3
7  ind60 =~  y4     1 3.6248665  0.645166    1.47260  0.131434            0.3
8  ind60 =~  y5     1 1.8580634  0.425645    1.18095  0.108127            0.3
9  ind60 =~  y6     1 0.2878725 -0.187725    1.52194 -0.037004            0.3
10 ind60 =~  y7     1 0.2758632 -0.201221    1.41352 -0.042706            0.3
11 ind60 =~  y8     1 0.0580136 -0.078119    1.45600 -0.016096            0.3
12 dem60 =~  x1     1 1.7122935  0.027160    0.09921  0.082132            0.3
13 dem60 =~  x2     1 0.3075573 -0.022079    0.20449 -0.032392            0.3
14 dem60 =~  x3     1 0.6928248 -0.038545    0.19028 -0.060772            0.3
15 dem60 =~  y1     1 0.1437928  0.037478    0.35276  0.031873            0.3
16 dem60 =~  y2     1 0.3908679  0.047628    0.51808  0.027580            0.3
17 dem60 =~  y3     1 1.8378309 -0.116412    0.46496 -0.075111            0.3
18 dem60 =~  y4     1 0.0035901  0.004093    0.44802  0.002741            0.3
19 dem60 =~  y5     1 0.4600728 -0.068721    0.35929 -0.057380            0.3
20 dem60 =~  y6     1 0.1120819 -0.037391    0.46303 -0.024226            0.3
21 dem60 =~  y7     1 1.2791759  0.139492    0.43005  0.097309            0.3
22 dem60 =~  y8     1 0.0018042 -0.004455    0.44297 -0.003017            0.3
23 dem65 =~  x1     1 1.6143560  0.029877    0.10141  0.088388            0.3
24 dem65 =~  x2     1 0.2965326 -0.024616    0.20902 -0.035331            0.3
25 dem65 =~  x3     1 0.6394735 -0.041859    0.19450 -0.064565            0.3
26 dem65 =~  y1     1 0.0157578  0.012371    0.36058  0.010292            0.3
27 dem65 =~  y2     1 0.2045302  0.063168    0.52956  0.035785            0.3
28 dem65 =~  y3     1 1.3402462 -0.162479    0.47527 -0.102561            0.3
29 dem65 =~  y4     1 0.1641479  0.045041    0.45796  0.029506            0.3
30 dem65 =~  y5     1 0.1552337 -0.040461    0.36726 -0.033051            0.3
31 dem65 =~  y6     1 0.3908672 -0.047628    0.47330 -0.030189            0.3
32 dem65 =~  y7     1 1.8378314  0.116412    0.43958  0.079447            0.3
33 dem65 =~  y8     1 0.0035900 -0.004093    0.45280 -0.002712            0.3
35    x1 ~~  x2     1 0.2583826 -0.053112    0.21848 -0.048619            0.2
36    x1 ~~  x3     1 0.1617887 -0.025587    0.20330 -0.025172            0.2
37    x1 ~~  y1     1 1.3084801  0.061075    0.37691  0.032408            0.2
38    x1 ~~  y2     1 2.7733610 -0.148355    0.55354 -0.053602            0.2
39    x1 ~~  y3     1 0.0189718  0.011718    0.49678  0.004718            0.2
40    x1 ~~  y4     1 0.9137512  0.064050    0.47869  0.026761            0.2
41    x1 ~~  y5     1 1.2592600  0.064017    0.38389  0.033352            0.2
42    x1 ~~  y6     1 0.0440642 -0.015021    0.49473 -0.006072            0.2
43    x1 ~~  y7     1 1.2361938 -0.081457    0.45948 -0.035456            0.2
44    x1 ~~  y8     1 0.0052944 -0.004701    0.47329 -0.001987            0.2
46    x2 ~~  x3     1 0.7584786  0.136012    0.41905  0.064915            0.2
47    x2 ~~  y1     1 1.0648536 -0.100788    0.77688 -0.025947            0.2
48    x2 ~~  y2     1 0.8355584  0.147343    1.14096  0.025828            0.2
49    x2 ~~  y3     1 0.4469439  0.103312    1.02397  0.020179            0.2
50    x2 ~~  y4     1 0.2256348 -0.057797    0.98668 -0.011715            0.2
51    x2 ~~  y5     1 0.0142816  0.012497    0.79127  0.003159            0.2
52    x2 ~~  y6     1 0.4679598 -0.088779    1.01973 -0.017412            0.2
53    x2 ~~  y7     1 0.0047702 -0.009243    0.94709 -0.001952            0.2
54    x2 ~~  y8     1 0.2933168  0.063662    0.97556  0.013051            0.2
56    x3 ~~  y1     1 0.5575905 -0.090705    0.72291 -0.025094            0.2
57    x3 ~~  y2     1 0.1123423 -0.068010    1.06169 -0.012812            0.2
58    x3 ~~  y3     1 0.6604979 -0.157435    0.95283 -0.033046            0.2
59    x3 ~~  y4     1 0.7236487  0.129802    0.91813  0.028275            0.2
60    x3 ~~  y5     1 0.1276051 -0.046253    0.73629 -0.012564            0.2
61    x3 ~~  y6     1 1.4491621  0.196077    0.94889  0.041328            0.2
62    x3 ~~  y7     1 0.3151511  0.093414    0.88129  0.021199            0.2
63    x3 ~~  y8     1 0.9619974 -0.144090    0.90778 -0.031746            0.2
65    y1 ~~  y2     1 0.0888638 -0.128980    1.96829 -0.013106            0.2
66    y1 ~~  y3     1 2.8412370  0.737775    1.76648  0.083531            0.2
67    y1 ~~  y4     1 0.5203584 -0.266686    1.70214 -0.031335            0.2
69    y1 ~~  y6     1 1.7713530  0.454621    1.75917  0.051686            0.2
70    y1 ~~  y7     1 0.2763302 -0.200276    1.63385 -0.024516            0.2
71    y1 ~~  y8     1 0.1902242 -0.141872    1.68295 -0.016860            0.2
73    y2 ~~  y3     1 0.8079829 -0.597610    2.59431 -0.046071            0.2
75    y2 ~~  y5     1 0.1345625  0.162330    2.00473  0.016195            0.2
77    y2 ~~  y7     1 0.8732059  0.531530    2.39952  0.044303            0.2
78    y2 ~~  y8     1 1.0406293  0.691085    2.47164  0.055921            0.2
80    y3 ~~  y4     1 0.0510848  0.119290    2.24351  0.010634            0.2
81    y3 ~~  y5     1 0.0006084 -0.011161    1.79919 -0.001241            0.2
82    y3 ~~  y6     1 1.5527919 -0.661816    2.31867 -0.057086            0.2
84    y3 ~~  y8     1 0.8202405 -0.446788    2.21822 -0.040283            0.2
86    y4 ~~  y5     1 0.0532645 -0.083123    1.73365 -0.009589            0.2
87    y4 ~~  y6     1 0.6534587  0.462183    2.23422  0.041373            0.2
88    y4 ~~  y7     1 0.4274479 -0.294699    2.07506 -0.028404            0.2
91    y5 ~~  y6     1 0.8603644 -0.336167    1.79174 -0.037524            0.2
92    y5 ~~  y7     1 0.2736913  0.207758    1.66410  0.024969            0.2
93    y5 ~~  y8     1 0.4852362 -0.237760    1.71412 -0.027741            0.2
95    y6 ~~  y7     1 0.1657003 -0.189862    2.14458 -0.017706            0.2
98    y7 ~~  y8     1 2.4812627  0.691278    2.05167  0.067387            0.2
   significant.mi high.power decision
4           FALSE       TRUE       NM
5           FALSE       TRUE       NM
6           FALSE       TRUE       NM
7           FALSE       TRUE       NM
8           FALSE       TRUE       NM
9           FALSE       TRUE       NM
10          FALSE       TRUE       NM
11          FALSE       TRUE       NM
12          FALSE       TRUE       NM
13          FALSE       TRUE       NM
14          FALSE       TRUE       NM
15          FALSE       TRUE       NM
16          FALSE       TRUE       NM
17          FALSE       TRUE       NM
18          FALSE       TRUE       NM
19          FALSE       TRUE       NM
20          FALSE       TRUE       NM
21          FALSE       TRUE       NM
22          FALSE       TRUE       NM
23          FALSE       TRUE       NM
24          FALSE       TRUE       NM
25          FALSE       TRUE       NM
26          FALSE       TRUE       NM
27          FALSE       TRUE       NM
28          FALSE       TRUE       NM
29          FALSE       TRUE       NM
30          FALSE       TRUE       NM
31          FALSE       TRUE       NM
32          FALSE       TRUE       NM
33          FALSE       TRUE       NM
35          FALSE      FALSE        I
36          FALSE       TRUE       NM
37          FALSE       TRUE       NM
38          FALSE       TRUE       NM
39          FALSE       TRUE       NM
40          FALSE       TRUE       NM
41          FALSE       TRUE       NM
42          FALSE       TRUE       NM
43          FALSE       TRUE       NM
44          FALSE       TRUE       NM
46          FALSE      FALSE        I
47          FALSE       TRUE       NM
48          FALSE       TRUE       NM
49          FALSE       TRUE       NM
50          FALSE       TRUE       NM
51          FALSE       TRUE       NM
52          FALSE       TRUE       NM
53          FALSE       TRUE       NM
54          FALSE       TRUE       NM
56          FALSE       TRUE       NM
57          FALSE       TRUE       NM
58          FALSE       TRUE       NM
59          FALSE       TRUE       NM
60          FALSE       TRUE       NM
61          FALSE       TRUE       NM
62          FALSE       TRUE       NM
63          FALSE       TRUE       NM
65          FALSE       TRUE       NM
66          FALSE       TRUE       NM
67          FALSE       TRUE       NM
69          FALSE       TRUE       NM
70          FALSE       TRUE       NM
71          FALSE       TRUE       NM
73          FALSE       TRUE       NM
75          FALSE       TRUE       NM
77          FALSE       TRUE       NM
78          FALSE       TRUE       NM
80          FALSE       TRUE       NM
81          FALSE       TRUE       NM
82          FALSE       TRUE       NM
84          FALSE       TRUE       NM
86          FALSE       TRUE       NM
87          FALSE       TRUE       NM
88          FALSE       TRUE       NM
91          FALSE       TRUE       NM
92          FALSE       TRUE       NM
93          FALSE       TRUE       NM
95          FALSE       TRUE       NM
98          FALSE       TRUE       NM
> 
> 
> 
> cleanEx()
> nameEx("monteCarloMed")
> ### * monteCarloMed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: monteCarloMed
> ### Title: Monte Carlo Confidence Intervals to Test Complex Indirect
> ###   Effects
> ### Aliases: monteCarloMed
> 
> ### ** Examples
> 
> #Simple two path mediation
> #Write expression of indirect effect
> med <- 'a*b'
> #Paramter values from analyses
> aparam <- 1
> bparam<-2
> #Asymptotic covariance matrix from analyses
> AC <- matrix(c(.01,.00002,
+                .00002,.02), nrow=2, byrow=TRUE)
> #Compute CI, include a plot
> monteCarloMed(med, coef1=aparam, coef2=bparam, outputValues=FALSE, plot=TRUE, ACM=AC)
   95% Confidence Interval
LL                  1.5356
UL                  2.4993
> 
> #Use a matrix of parameter estimates as input
> aparam<-c(1,2)
> monteCarloMed(med, coef1=aparam, outputValues=FALSE, plot=TRUE, ACM=AC)
   95% Confidence Interval
LL                  1.5344
UL                  2.5030
> 
> 
> 
> #complex mediation with two paths for the indirect effect
> #Write expression of indirect effect
> med <- 'a1*b1 + a1*b2'
> #Paramter values and standard errors from analyses
> aparam <- 1
> b1param<-2
> b2param<-1
> #Asymptotic covariance matrix from analyses
> AC <- matrix(c(1,.00002, .00003,
+                     .00002,1, .00002,
+ 					.00003, .00002, 1), nrow=3, byrow=TRUE)
> #Compute CI do not include a plot
> monteCarloMed(med, coef1=aparam, coef2=b1param, coef3=b2param, ACM=AC)
   95% Confidence Interval
LL                 -2.8919
UL                 11.4779
> 
> 
> 
> cleanEx()
> nameEx("moreFitIndices")
> ### * moreFitIndices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moreFitIndices
> ### Title: Calculate more fit indices
> ### Aliases: moreFitIndices moreFitIndices
> 
> ### ** Examples
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> fit <- cfa(HS.model, data=HolzingerSwineford1939)
> moreFitIndices(fit)
         nfi          ifi         gfi*        agfi*         ciac         ecvi 
   0.9071607    0.9314908    0.9565611    0.9185521 7476.5731866 7475.5695875 
         sic         bic*          hqc 
3794.0917612 7544.0149775 7517.2909607 
> 
> 
> 
> cleanEx()
> nameEx("orthogonalize")
> ### * orthogonalize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: orthogonalize
> ### Title: Orthogonalize data for 2-way interaction in SEM
> ### Aliases: orthogonalize
> 
> ### ** Examples
> 
> 
> library(MASS)
> 
> n <- 500
> means <- c(0,0)
> covmat <- matrix(c(1, 0.3, 0.3, 1),nrow=2)
> 
> data <- mvrnorm(n,means,covmat)
> 
> x<-as.vector(data[,1])
> z<-as.vector(data[,2])
> 
> y<-rnorm(n,0,1)+.4*x+.4*z+.2*x*z
> 
> x1<-rnorm(n,0.2,.2)+.7*x
> x2<-rnorm(n,0.2,.2)+.7*x
> x3<-rnorm(n,0.2,.2)+.7*x
> z1<-rnorm(n,0.2,.2)+.7*z
> z2<-rnorm(n,0.2,.2)+.7*z
> z3<-rnorm(n,0.2,.2)+.7*z
> y1<-rnorm(n,0.2,.2)+.7*y
> y2<-rnorm(n,0.2,.2)+.7*y
> y3<-rnorm(n,0.2,.2)+.7*y
> 
> dat<-data.frame(cbind(x1,x2,x3,z1,z2,z3,y1,y2,y3))
> 
> datOrth <-orthogonalize(dat,(1:3), (4:6))
> 
> #Fit model in Lavaan
> library(lavaan)
> 
> syntax <- ' 
+ x =~ x1 + x2 +x3
+ z =~ z1 + z2 + z3
+ xz =~ x1z1 + x1z2 + x1z3 + x2z1 + x2z2 + x2z3 + x3z1 + x3z2 + x3z3
+ y =~ y1 + y2 + y3
+ x ~~ z
+ x ~~ 0*xz
+ z ~~ 0*xz
+ y ~ x + z +xz
+ '
> 
> fit <- sem(model = syntax, data=datOrth, std.lv=TRUE)
> summary(fit, fit.measures=TRUE)
lavaan (0.4-14) converged normally after 174 iterations

  Number of observations                           500

  Estimator                                         ML
  Minimum Function Chi-square                 4657.538
  Degrees of freedom                               131
  P-value                                        0.000

Chi-square test baseline model:

  Minimum Function Chi-square                19804.671
  Degrees of freedom                               153
  P-value                                        0.000

Full model versus baseline model:

  Comparative Fit Index (CFI)                    0.770
  Tucker-Lewis Index (TLI)                       0.731

Loglikelihood and Information Criteria:

  Loglikelihood user model (H0)              -1838.278
  Loglikelihood unrestricted model (H1)        490.491

  Number of free parameters                         40
  Akaike (AIC)                                3756.557
  Bayesian (BIC)                              3925.141
  Sample-size adjusted Bayesian (BIC)         3798.179

Root Mean Square Error of Approximation:

  RMSEA                                          0.263
  90 Percent Confidence Interval          0.256  0.269
  P-value RMSEA <= 0.05                          0.000

Standardized Root Mean Square Residual:

  SRMR                                           0.016

Parameter estimates:

  Information                                 Expected
  Standard Errors                             Standard

                   Estimate  Std.err  Z-value  P(>|z|)
Latent variables:
  x =~
    x1                0.719    0.025   28.988    0.000
    x2                0.709    0.024   29.097    0.000
    x3                0.705    0.024   29.228    0.000
  z =~
    z1                0.731    0.025   29.281    0.000
    z2                0.719    0.025   28.921    0.000
    z3                0.733    0.025   29.624    0.000
  xz =~
    x1z1              0.584    0.020   29.002    0.000
    x1z2              0.573    0.020   28.232    0.000
    x1z3              0.586    0.020   28.893    0.000
    x2z1              0.589    0.020   28.956    0.000
    x2z2              0.577    0.020   28.426    0.000
    x2z3              0.593    0.021   28.780    0.000
    x3z1              0.556    0.019   28.905    0.000
    x3z2              0.543    0.019   28.330    0.000
    x3z3              0.555    0.019   28.978    0.000
  y =~
    y1                0.700    0.024   29.504    0.000
    y2                0.710    0.024   29.690    0.000
    y3                0.704    0.024   29.252    0.000

Regressions:
  y ~
    x                 0.330    0.050    6.586    0.000
    z                 0.464    0.052    8.875    0.000
    xz                0.232    0.047    4.945    0.000

Covariances:
  x ~~
    z                 0.256    0.043    5.948    0.000
    xz                0.000
  z ~~
    xz                0.000

Variances:
    x1                0.046    0.004
    x2                0.043    0.004
    x3                0.040    0.004
    z1                0.042    0.004
    z2                0.048    0.004
    z3                0.035    0.004
    x1z1              0.032    0.002
    x1z2              0.041    0.003
    x1z3              0.033    0.002
    x2z1              0.033    0.002
    x2z2              0.039    0.003
    x2z3              0.036    0.003
    x3z1              0.030    0.002
    x3z2              0.036    0.002
    x3z3              0.029    0.002
    y1                0.039    0.004
    y2                0.034    0.004
    y3                0.046    0.004
    x                 1.000
    z                 1.000
    xz                1.000
    y                 1.000

> 
> 
> 
> cleanEx()
> nameEx("parcelAllocation")
> ### * parcelAllocation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parcelAllocation
> ### Title: Random Allocation of Items to Parcels in a Structural Equation
> ###   Model
> ### Aliases: parcelAllocation
> 
> ### ** Examples
> 
> #Fit 3 factor CFA to simulated data.
> #Each factor has 9 indicators that are randomly parceled into 3 parcels
> #Lavaan syntax for the model to be fit to parceled data
> syntax <- 'La =~ V1 + V2 + V3 
+            Lb =~ V4 + V5 + V6
+ '
> #Parcel and fit data 20 times. The actual parcel number should be higher than 20 times.
> name1 <- colnames(simParcel)[1:9]
> name2 <- colnames(simParcel)[10:18]
> parcelAllocation(list(c(3,3,3),c(3,3,3)), list(name1, name2), nAlloc=20, syntax=syntax, dataset=simParcel)
$Estimates
   lhs op rhs   est  S.D.   MAX   MIN Range % Sig
1   La =~  V1 1.000 0.000 1.000 1.000 0.000    NA
2   La =~  V2 0.995 0.054 1.130 0.912 0.218     1
3   La =~  V3 1.002 0.047 1.090 0.926 0.164     1
4   Lb =~  V4 1.000 0.000 1.000 1.000 0.000    NA
5   Lb =~  V5 0.987 0.041 1.070 0.902 0.168     1
6   Lb =~  V6 0.994 0.047 1.062 0.898 0.164     1
7   V1 ~~  V1 0.219 0.014 0.247 0.196 0.052     1
8   V2 ~~  V2 0.211 0.017 0.237 0.174 0.063     1
9   V3 ~~  V3 0.203 0.018 0.240 0.162 0.078     1
10  V4 ~~  V4 0.208 0.020 0.240 0.165 0.075     1
11  V5 ~~  V5 0.216 0.018 0.249 0.187 0.062     1
12  V6 ~~  V6 0.206 0.019 0.240 0.161 0.079     1
13  La ~~  La 0.377 0.021 0.398 0.326 0.072     1
14  Lb ~~  Lb 0.361 0.019 0.395 0.329 0.066     1
15  La ~~  Lb 0.195 0.007 0.208 0.180 0.028     1

$SE
   lhs op rhs Avg SE  S.D.   MAX   MIN Range
1   La =~  V1  0.000 0.000 0.000 0.000 0.000
2   La =~  V2  0.046 0.003 0.054 0.041 0.013
3   La =~  V3  0.046 0.003 0.052 0.041 0.011
4   Lb =~  V4  0.000 0.000 0.000 0.000 0.000
5   Lb =~  V5  0.047 0.002 0.050 0.044 0.007
6   Lb =~  V6  0.047 0.002 0.049 0.041 0.008
7   V1 ~~  V1  0.016 0.001 0.018 0.015 0.003
8   V2 ~~  V2  0.016 0.001 0.018 0.015 0.003
9   V3 ~~  V3  0.016 0.001 0.017 0.014 0.003
10  V4 ~~  V4  0.016 0.001 0.018 0.014 0.004
11  V5 ~~  V5  0.016 0.001 0.018 0.015 0.003
12  V6 ~~  V6  0.016 0.001 0.017 0.014 0.003
13  La ~~  La  0.030 0.001 0.032 0.028 0.005
14  Lb ~~  Lb  0.029 0.001 0.032 0.028 0.004
15  La ~~  Lb  0.019 0.001 0.020 0.017 0.003

$Fit
      Avg Ind  S.D.    MAX   MIN  Range
chisq   6.906 3.652 14.543 1.456 13.087
cfi     0.999 0.001  1.000 0.997  0.003
tli     1.001 0.003  1.006 0.994  0.012
rmsea   0.007 0.011  0.032 0.000  0.032
srmr    0.011 0.003  0.019 0.006  0.013

> 
> 
> 
> cleanEx()
> nameEx("plotRMSEApower")
> ### * plotRMSEApower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotRMSEApower
> ### Title: Plot power curves for RMSEA
> ### Aliases: plotRMSEApower
> 
> ### ** Examples
> 
> plotRMSEApower(.025, .075, 23, 100, 500, 10)
> 
> 
> 
> cleanEx()
> nameEx("runMI")
> ### * runMI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runMI
> ### Title: Multiply impute and analyze data using lavaan
> ### Aliases: runMI
> 
> ### ** Examples
> 
> 
> library(lavaan)
> 
> HS.model <- ' visual  =~ x1 + x2 + x3
+               textual =~ x4 + x5 + x6
+               speed   =~ x7 + x8 + x9 '
> 
> HSMiss <- HolzingerSwineford1939[,paste("x", 1:9, sep="")]
> randomMiss <- rbinom(prod(dim(HSMiss)), 1, 0.1)
> randomMiss <- matrix(as.logical(randomMiss), nrow=nrow(HSMiss))
> HSMiss[randomMiss] <- NA
> 
> out <- runMI(HSMiss, HS.model, m = 3)
Loading required package: Amelia
Warning: package 'Amelia' was built under R version 2.15.1
Loading required package: foreign
## 
## Amelia II: Multiple Imputation
## (Version 1.6.3, built: 2012-06-21)
## Copyright (C) 2005-2012 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> 
> HSMiss2 <- cbind(HSMiss, school = HolzingerSwineford1939[,"school"])
> out2 <- runMI(HSMiss2, HS.model, m = 3, group="school", noms="school")
> 
> library(Amelia)
> 
> modsim <- '
+ f1 =~ 0.7*y1+0.7*y2+0.7*y3
+ f2 =~ 0.7*y4+0.7*y5+0.7*y6
+ f3 =~ 0.7*y7+0.7*y8+0.7*y9'
> 
> mod <- '
+ f1 =~ y1+y2+y3
+ f2 =~ y4+y5+y6
+ f3 =~ y7+y8+y9'
> 
> datsim <- simulateData(modsim,model.type="cfa", meanstructure=TRUE, 
+ 	std.lv=TRUE, sample.nobs=c(200,200))
> randomMiss2 <- rbinom(prod(dim(datsim)), 1, 0.1)
> randomMiss2 <- matrix(as.logical(randomMiss2), nrow=nrow(datsim))
> datsim[randomMiss2] <- NA
> datsimMI <- amelia(datsim,m=3, noms="group")
-- Imputation 1 --

 1  2  3  4  5  6  7 

-- Imputation 2 --

 1  2  3  4  5  6  7 

-- Imputation 3 --

 1  2  3  4  5  6  7  8 

> 
> out3 <- runMI(datsimMI$imputations, mod, group="group")
> 
> 
> 
> 
> cleanEx()

detaching 'package:Amelia', 'package:foreign'

> nameEx("simParcel")
> ### * simParcel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simParcel
> ### Title: Simulated Data set to Demonstrate Random Allocations of Parcels
> ### Aliases: simParcel
> 
> ### ** Examples
> 
> head(simParcel)
     f1item1      f1item2     f1item3    f1item4    f1item5    f1item6
1 -1.7896958 -1.951487976  0.06921463 -1.4553012 -0.8801326 -0.6760663
2  0.5245525 -0.009665777  2.02336708 -0.5052323  1.2978291  0.4663007
3 -0.5121904  0.101476908 -0.41061133  0.1037776  1.0748526  0.7012178
4 -0.7769473 -0.547552458 -1.01396947  0.4581587 -0.6279040 -0.3917189
5  1.1383346  0.444802803  0.38796807 -0.9788030 -0.2293250  0.4426714
6 -0.6525078  0.080539695 -2.00157281 -0.3997432 -1.2986350 -1.4376393
      f1item7    f1item8    f1item9    f2item1    f2item2    f2item3
1  0.07133309 -1.6728790 -0.7473949 -0.4374817 -0.1431815 -1.0342390
2  2.74670484  1.3816698  1.8065698  0.1358011  0.8965890  1.6516467
3  1.31352970  0.2770826  1.1031422  0.9553923  1.0204971  0.1568082
4  0.96030051  0.2503113 -0.8986681  0.5973238  1.4027800  0.9871376
5  0.28534016  0.3281577  0.1932261 -0.7980739 -1.6738395 -0.5503140
6 -0.97896255 -1.0324955 -1.2430591 -0.4373219 -0.8818279  1.2320996
      f2item4     f2item5    f2item6    f2item7    f2item8    f2item9
1 -1.44552176  0.09842477 -1.1666086 -1.5057074 -3.3265526 -1.4957729
2  1.65291809 -0.12436952 -0.5910034  1.7282434  2.2468441  2.2650310
3  0.70208355  0.36394797  0.2040989  1.8288085  0.1438386  0.2629538
4  0.00197898 -0.27991938  1.6400470  0.6514612  0.7272645  2.5138630
5  0.76802013 -0.93197593 -0.7515958  0.7287445 -0.2093306 -0.1923059
6 -1.32456576  0.52782351  2.1100907 -1.0557662  0.5176468 -0.1303705
> 
> 
> 
> cleanEx()
> nameEx("skew")
> ### * skew
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skew
> ### Title: Finding skewness
> ### Aliases: skew
> 
> ### ** Examples
> 
> skew(1:5)
skew (g1)        se         z         p 
 0.000000  1.095445  0.000000  1.000000 
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.01 0.08 7.11 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
